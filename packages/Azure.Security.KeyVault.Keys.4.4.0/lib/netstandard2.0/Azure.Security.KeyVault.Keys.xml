<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.Security.KeyVault.Keys</name>
    </assembly>
    <members>
        <member name="T:Azure.Security.KeyVault.Keys.CreateEcKeyOptions">
            <summary>
            The properties needed to create an Elliptic Curve key using the <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateEcKeyOptions.Name">
            <summary>
            Gets the name of the key to create.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateEcKeyOptions.KeyType">
            <summary>
            Gets the key type of the <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> to create, including <see cref="P:Azure.Security.KeyVault.Keys.KeyType.Ec" /> and <see cref="P:Azure.Security.KeyVault.Keys.KeyType.EcHsm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateEcKeyOptions.CurveName">
            <summary>
            Gets or sets the elliptic curve name. See <see cref="T:Azure.Security.KeyVault.Keys.KeyCurveName" /> for possible values. If null, the service default is used.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateEcKeyOptions.HardwareProtected">
            <summary>
            Gets a value indicating whether to create a hardware-protected key in a hardware security module (HSM).
            </summary>
            <value><c>true</c> to create a hardware-protected key; otherwise, <c>false</c> to create a software key.</value>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CreateEcKeyOptions.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.CreateEcKeyOptions" /> class.
            </summary>
            <param name="name">The name of the key to create.</param>
            <param name="hardwareProtected">True to create a hardware-protected key in a hardware security module (HSM). The default is false to create a software key.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.CreateKeyOptions">
            <summary>
            The key-specific properties needed to create a key using the <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CreateKeyOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.CreateKeyOptions" /> class.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateKeyOptions.KeyOperations">
            <summary>
            Gets a list of <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> values the key should support.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateKeyOptions.NotBefore">
            <summary>
            Gets or sets a <see cref="T:System.DateTimeOffset" /> indicating when the key will be valid.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateKeyOptions.ExpiresOn">
            <summary>
            Gets or sets a <see cref="T:System.DateTimeOffset" /> indicating when the key will expire.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateKeyOptions.Enabled">
            <summary>
            Gets or sets a value indicating whether the key will be enabled. If null, the service default is used.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateKeyOptions.Exportable">
            <summary>
            Gets or sets a value indicating whether the private key can be exported.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateKeyOptions.ReleasePolicy">
            <summary>
            Gets or sets the policy rules under which the key can be exported.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateKeyOptions.Tags">
            <summary>
            Gets a dictionary of tags with specific metadata about the key. Although this collection cannot be set, it can be modified
             or initialized with a <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/how-to-initialize-a-dictionary-with-a-collection-initializer">collection initializer</see>.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.CreateOctKeyOptions">
            <summary>
            The properties needed to create an AES key using the <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateOctKeyOptions.Name">
            <summary>
            Gets the name of the key to create.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateOctKeyOptions.KeyType">
            <summary>
            Gets the key type of the <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> to create, including <see cref="P:Azure.Security.KeyVault.Keys.KeyType.Oct" /> and <see cref="P:Azure.Security.KeyVault.Keys.KeyType.OctHsm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateOctKeyOptions.KeySize">
            <summary>
            Gets or sets the key size in bits, such as 128, 192, or 256. If null, the service default is used.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateOctKeyOptions.HardwareProtected">
            <summary>
            Gets a value indicating whether to create a hardware-protected key in a hardware security module (HSM).
            </summary>
            <value><c>true</c> to create a hardware-protected key; otherwise, <c>false</c> to create a software key.</value>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CreateOctKeyOptions.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.CreateOctKeyOptions" /> class.
            </summary>
            <param name="name">The name of the key to create.</param>
            <param name="hardwareProtected">True to create a hardware-protected key in a hardware security module (HSM). The default is false to create a software key.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.CreateRsaKeyOptions">
            <summary>
            The properties needed to create an RSA key using the <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateRsaKeyOptions.Name">
            <summary>
            Gets the name of the key to create.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateRsaKeyOptions.KeyType">
            <summary>
            Gets the key type of the <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> to create, including <see cref="P:Azure.Security.KeyVault.Keys.KeyType.Rsa" /> and <see cref="P:Azure.Security.KeyVault.Keys.KeyType.RsaHsm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateRsaKeyOptions.KeySize">
            <summary>
            Gets or sets the key size in bits, such as 2048, 3072, or 4096. If null, the service default is used.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateRsaKeyOptions.PublicExponent">
            <summary>
            Gets or sets the public exponent for a RSA key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.CreateRsaKeyOptions.HardwareProtected">
            <summary>
            Gets a value indicating whether to create a hardware-protected key in a hardware security module (HSM).
            </summary>
            <value><c>true</c> to create a hardware-protected key; otherwise, <c>false</c> to create a software key.</value>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CreateRsaKeyOptions.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.CreateRsaKeyOptions" /> class.
            </summary>
            <param name="name">The name of the key to create.</param>
            <param name="hardwareProtected">True to create a hardware-protected key in a hardware security module (HSM). The default is false to create a software key.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.AesCbc">
            <summary>
            Copied from Microsoft.Azure.KeyVault.Cryptography for vanilla AESCBC as defined in https://tools.ietf.org/html/rfc3394
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.AesKw">
            <summary>
            Copied from Microsoft.Azure.KeyVault.Cryptography for AES Key Wrap algorithm as defined in https://tools.ietf.org/html/rfc3394.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.Crypto">
            <summary>
            Cryptography utilities.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.Crypto.GenerateIv(System.Int32)">
            <summary>
            Generates a cryptographically random initialization vector of the given size in bytes.
            </summary>
            <param name="byteSize">The size of the initialization vector in bytes.</param>
            <returns>An initialization vector of the given size in bytes.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient">
            <summary>
            A client used to perform cryptographic operations with Azure Key Vault keys.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.#ctor(System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> class.
            </summary>
            <param name="keyId">
            The key identifier of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> which will be used for cryptographic operations.
            If you have a key <see cref="T:System.Uri" />, use <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier" /> to parse the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.VaultUri" /> and other information.
            You should validate that this URI references a valid Key Vault or Managed HSM resource. See https://aka.ms/azsdk/blog/vault-uri for details.
            </param>
            <param name="credential">A <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests to the vault, like DefaultAzureCredential.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyId" /> or <paramref name="credential" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> class.
            </summary>
            <param name="keyId">
            The key identifier of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> which will be used for cryptographic operations.
            If you have a key <see cref="T:System.Uri" />, use <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier" /> to parse the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.VaultUri" /> and other information.
            You should validate that this URI references a valid Key Vault or Managed HSM resource. See https://aka.ms/azsdk/blog/vault-uri for details.
            </param>
            <param name="credential">A <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests to the vault, like DefaultAzureCredential.</param>
            <param name="options"><see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions" /> the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> for local or remote operations on Key Vault.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyId" /> or <paramref name="credential" /> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.Version" /> is not supported.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.#ctor(Azure.Security.KeyVault.Keys.JsonWebKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> class.
            Cryptographic operations will be performed only on the local machine.
            </summary>
            <param name="key">A <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> used for local cryptographic operations.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.KeyType" /> of <paramref name="key" /> is not supported.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.#ctor(Azure.Security.KeyVault.Keys.JsonWebKey,Azure.Security.KeyVault.Keys.Cryptography.LocalCryptographyClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> class.
            Cryptographic operations will be performed only on the local machine.
            </summary>
            <param name="key">A <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> used for local cryptographic operations.</param>
            <param name="options"><see cref="T:Azure.Security.KeyVault.Keys.Cryptography.LocalCryptographyClientOptions" /> to configure the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> for local-only operations.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.KeyType" /> of <paramref name="key" /> is not supported.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.KeyId">
            <summary>
            Gets the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Id" /> of the key used to perform cryptographic operations for the client.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.EncryptAsync(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Encrypts the specified plaintext.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> to use.</param>
            <param name="plaintext">The data to encrypt.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            An <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult" /> containing the encrypted data
            along with all other information needed to decrypt it. This information should be stored with the encrypted data.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Encrypt(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Encrypts the specified plaintext.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> to use.</param>
            <param name="plaintext">The data to encrypt.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            An <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult" /> containing the encrypted data
            along with all other information needed to decrypt it. This information should be stored with the encrypted data.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.EncryptAsync(Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters,System.Threading.CancellationToken)">
            <summary>
            Encrypts plaintext.
            </summary>
            <param name="encryptParameters">An <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> containing the data to encrypt and other parameters for algorithm-dependent encryption.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            An <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult" /> containing the encrypted data
            along with all other information needed to decrypt it. This information should be stored with the encrypted data.
            </returns>
            <exception cref="T:System.ArgumentException">The specified algorithm does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="encryptParameters" /> is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Encrypt(Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters,System.Threading.CancellationToken)">
            <summary>
            Encrypts plaintext.
            </summary>
            <param name="encryptParameters">An <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> containing the data to encrypt and other parameters for algorithm-dependent encryption.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            An <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult" /> containing the encrypted data
            along with all other information needed to decrypt it. This information should be stored with the encrypted data.
            </returns>
            <exception cref="T:System.ArgumentException">The specified algorithm does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="encryptParameters" /> is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.DecryptAsync(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Decrypts the specified ciphertext.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> to use.</param>
            <param name="ciphertext">The encrypted data to decrypt.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the decrypt operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult" /> contains the encrypted data
            along with information regarding the algorithm and key used to decrypt it.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Decrypt(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Decrypts ciphertext.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> to use.</param>
            <param name="ciphertext">The encrypted data to decrypt.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the decrypt operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult" /> contains the encrypted data
            along with information regarding the algorithm and key used to decrypt it.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.DecryptAsync(Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters,System.Threading.CancellationToken)">
            <summary>
            Decrypts ciphertext.
            </summary>
            <param name="decryptParameters">A <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> containing the data to decrypt and other parameters for algorithm-dependent decryption.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the decrypt operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult" /> contains the encrypted data
            along with information regarding the algorithm and key used to decrypt it.
            </returns>
            <exception cref="T:System.ArgumentException">The specified algorithm does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="decryptParameters" /> is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Decrypt(Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters,System.Threading.CancellationToken)">
            <summary>
            Decrypts the specified ciphertext.
            </summary>
            <param name="decryptParameters">A <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> containing the data to decrypt and other parameters for algorithm-dependent decryption.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the decrypt operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult" /> contains the encrypted data
            along with information regarding the algorithm and key used to decrypt it.
            </returns>
            <exception cref="T:System.ArgumentException">The specified algorithm does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="decryptParameters" /> is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.WrapKeyAsync(Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Encrypts the specified key.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" /> to use.</param>
            <param name="key">The key to encrypt.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the wrap operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.WrapResult" /> contains the wrapped key
            along with all other information needed to unwrap it. This information should be stored with the wrapped key.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.WrapKey(Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Encrypts the specified key.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" /> to use.</param>
            <param name="key">The key to encrypt.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the wrap operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.WrapResult" /> contains the wrapped key
            along with all other information needed to unwrap it. This information should be stored with the wrapped key.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.UnwrapKeyAsync(Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Decrypts the specified encrypted key.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" /> to use.</param>
            <param name="encryptedKey">The encrypted key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the unwrap operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.UnwrapResult" /> contains the key
            along with information regarding the algorithm and key used to unwrap it.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.UnwrapKey(Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Decrypts the specified encrypted key.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" /> to use.</param>
            <param name="encryptedKey">The encrypted key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the unwrap operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.UnwrapResult" /> contains the key
            along with information regarding the algorithm and key used to unwrap it.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.SignAsync(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Signs the specified digest.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to use.</param>
            <param name="digest">The pre-hashed digest to sign. The hash algorithm used to compute the digest must be compatible with the specified algorithm.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the sign operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignResult" /> contains the signature
            along with all other information needed to verify it. This information should be stored with the signature.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Sign(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Signs the specified digest.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to use.</param>
            <param name="digest">The pre-hashed digest to sign. The hash algorithm used to compute the digest must be compatible with the specified algorithm.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the sign operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignResult" /> contains the signature
            along with all other information needed to verify it. This information should be stored with the signature.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.VerifyAsync(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.Byte[],System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Verifies the specified signature.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to use. This must be the same algorithm used to sign the digest.</param>
            <param name="digest">The pre-hashed digest corresponding to the signature. The hash algorithm used to compute the digest must be compatible with the specified algorithm.</param>
            <param name="signature">The signature to verify.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the verify operation. If the signature is valid the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult.IsValid" /> property of the returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult" /> will be set to true.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Verify(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.Byte[],System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Verifies the specified signature.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to use. This must be the same algorithm used to sign the digest.</param>
            <param name="digest">The pre-hashed digest corresponding to the signature. The hash algorithm used to compute the digest must be compatible with the specified algorithm.</param>
            <param name="signature">The signature to verify.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the verify operation. If the signature is valid the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult.IsValid" /> property of the returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult" /> will be set to true.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.SignDataAsync(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Signs the specified data.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to use.</param>
            <param name="data">The data to sign.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the sign operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignResult" /> contains the signature
            along with all other information needed to verify it. This information should be stored with the signature.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.SignData(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Signs the specified data.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to use.</param>
            <param name="data">The data to sign.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the sign operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignResult" /> contains the signature
            along with all other information needed to verify it. This information should be stored with the signature.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.SignDataAsync(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Signs the specified data.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to use.</param>
            <param name="data">The data to sign.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the sign operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignResult" /> contains the signature
            along with all other information needed to verify it. This information should be stored with the signature.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="data" /> is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.SignData(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Signs the specified data.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to use.</param>
            <param name="data">The data to sign.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the sign operation. The returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignResult" /> contains the signature
            along with all other information needed to verify it. This information should be stored with the signature.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="data" /> is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.VerifyDataAsync(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.Byte[],System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Verifies the specified signature.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to use. This must be the same algorithm used to sign the data.</param>
            <param name="data">The data corresponding to the signature.</param>
            <param name="signature">The signature to verify.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the verify operation. If the signature is valid the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult.IsValid" /> property of the returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult" /> will be set to true.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="data" /> is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.VerifyData(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.Byte[],System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Verifies the specified signature.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to use. This must be the same algorithm used to sign the data.</param>
            <param name="data">The data corresponding to the signature.</param>
            <param name="signature">The signature to verify.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the verify operation. If the signature is valid the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult.IsValid" /> property of the returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult" /> will be set to true.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="data" /> is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.VerifyDataAsync(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.IO.Stream,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Verifies the specified signature.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to use. This must be the same algorithm used to sign the data.</param>
            <param name="data">The data corresponding to the signature.</param>
            <param name="signature">The signature to verify.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the verify operation. If the signature is valid the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult.IsValid" /> property of the returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult" /> will be set to true.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="data" /> is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.VerifyData(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.IO.Stream,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Verifies the specified signature.
            </summary>
            <param name="algorithm">The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to use. This must be the same algorithm used to sign the data.</param>
            <param name="data">The data corresponding to the signature.</param>
            <param name="signature">The signature to verify.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
            <returns>
            The result of the verify operation. If the signature is valid the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult.IsValid" /> property of the returned <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult" /> will be set to true.
            </returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="algorithm" /> does not match the key corresponding to the key identifier.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="data" /> is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The local cryptographic provider threw an exception.</exception>
            <exception cref="T:System.InvalidOperationException">The key is invalid for the current operation.</exception>
            <exception cref="T:System.NotSupportedException">The operation is not supported with the specified key.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Azure#Core#Cryptography#IKeyEncryptionKey#WrapKey(System.String,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Encrypts the specified key using the specified algorithm.
            </summary><param name="algorithm">The key wrap algorithm used to encrypt the specified key.</param><param name="key">The key to be encrypted.</param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param><returns>The encrypted key bytes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Azure#Core#Cryptography#IKeyEncryptionKey#WrapKeyAsync(System.String,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Encrypts the specified key using the specified algorithm.
            </summary><param name="algorithm">The key wrap algorithm used to encrypt the specified key.</param><param name="key">The key to be encrypted.</param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param><returns>The encrypted key bytes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Azure#Core#Cryptography#IKeyEncryptionKey#UnwrapKey(System.String,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Decrypts the specified encrypted key using the specified algorithm.
            </summary><param name="algorithm">The key wrap algorithm which was used to encrypt the specified encrypted key.</param><param name="encryptedKey">The encrypted key to be decrypted.</param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param><returns>The decrypted key bytes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Azure#Core#Cryptography#IKeyEncryptionKey#UnwrapKeyAsync(System.String,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Decrypts the specified encrypted key using the specified algorithm.
            </summary><param name="algorithm">The key wrap algorithm which was used to encrypt the specified encrypted key.</param><param name="encryptedKey">The encrypted key to be decrypted.</param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param><returns>The decrypted key bytes.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions">
            <summary>
            Options that allow you to configure the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> for local or remote operations on Key Vault.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.LatestVersion">
            <summary>
            The latest service version supported by this client library.
            For more information, see
            <see href="https://docs.microsoft.com/rest/api/keyvault/key-vault-versions">Key Vault versions</see>.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.ServiceVersion">
            <summary>
            The versions of Azure Key Vault supported by this client
            library.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.ServiceVersion.V7_0">
            <summary>
            The Key Vault API version 7.0.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.ServiceVersion.V7_1">
            <summary>
            The Key Vault API version 7.1.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.ServiceVersion.V7_2">
            <summary>
            The Key Vault API version 7.2.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.ServiceVersion.V7_3">
            <summary>
            The Key Vault API version 7.3.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.Version">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.ServiceVersion" /> of the service API used when
            making requests. For more information, see
            <see href="https://docs.microsoft.com/rest/api/keyvault/key-vault-versions">Key Vault versions</see>.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.#ctor(Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.ServiceVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions" /> class.
            class.
            </summary>
            <param name="version">
            The <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.ServiceVersion" /> of the service API used when
            making requests.
            </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions.DisableChallengeResourceVerification">
            <summary>
            Gets or sets whether to disable verification that the authentication challenge resource matches the Key Vault or Managed HSM domain.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters">
            <summary>
            Parameters for decrypting ciphertext.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.Rsa15Parameters(System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.Rsa15" /> encryption algorithm.
            </summary>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.Rsa15" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.RsaOaepParameters(System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.RsaOaep" /> encryption algorithm.
            </summary>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.RsaOaep" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.RsaOaep256Parameters(System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.RsaOaep256" /> encryption algorithm.
            </summary>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.RsaOaep256" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.A128GcmParameters(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128Gcm" /> encryption algorithm.
            </summary>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="iv">The initialization vector (or nonce) generated during encryption.</param>
            <param name="authenticationTag">The authentication tag generated during encryption.</param>
            <param name="additionalAuthenticatedData">Optional data that is authenticated but not encrypted.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128Gcm" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" />, <paramref name="iv" />, or <paramref name="authenticationTag" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.A192GcmParameters(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192Gcm" /> encryption algorithm.
            </summary>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="iv">The initialization vector (or nonce) generated during encryption.</param>
            <param name="authenticationTag">The authentication tag generated during encryption.</param>
            <param name="additionalAuthenticatedData">Optional data that is authenticated but not encrypted.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192Gcm" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" />, <paramref name="iv" />, or <paramref name="authenticationTag" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.A256GcmParameters(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256Gcm" /> encryption algorithm.
            </summary>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="iv">The initialization vector (or nonce) generated during encryption.</param>
            <param name="authenticationTag">The authentication tag generated during encryption.</param>
            <param name="additionalAuthenticatedData">Optional data that is authenticated but not encrypted.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256Gcm" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" />, <paramref name="iv" />, or <paramref name="authenticationTag" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.A128CbcParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128Cbc" /> encryption algorithm.
            </summary>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="iv">The initialization vector used during encryption.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128Cbc" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" /> or <paramref name="iv" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.A192CbcParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192Cbc" /> encryption algorithm.
            </summary>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="iv">The initialization vector used during encryption.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192Cbc" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" /> or <paramref name="iv" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.A256CbcParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256Cbc" /> encryption algorithm.
            </summary>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="iv">The initialization vector used during encryption.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256Cbc" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" /> or <paramref name="iv" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.A128CbcPadParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128CbcPad" /> encryption algorithm with PKCS#7 padding.
            </summary>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="iv">The initialization vector used during encryption.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128CbcPad" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" /> or <paramref name="iv" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.A192CbcPadParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192CbcPad" /> encryption algorithm with PKCS#7 padding.
            </summary>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="iv">The initialization vector used during encryption.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192CbcPad" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" /> or <paramref name="iv" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.A256CbcPadParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256CbcPad" /> encryption algorithm with PKCS#7 padding.
            </summary>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="iv">The initialization vector used during encryption.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256CbcPad" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" /> or <paramref name="iv" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.Algorithm">
            <summary>
            Gets or sets the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.Ciphertext">
            <summary>
            Gets the ciphertext to decrypt.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.Iv">
            <summary>
            Gets the initialization vector for decryption.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.AuthenticationTag">
            <summary>
            Gets the authenticated tag resulting from encryption with a symmetric key using AES.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.AdditionalAuthenticatedData">
            <summary>
            Gets additional data that is authenticated during decryption but not encrypted.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult">
            <summary>
            Represents information about a decrypt operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult.KeyId">
            <summary>
            Gets the key identifier of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> used to decrypt.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult.Plaintext">
            <summary>
            Gets the decrypted data.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult.Algorithm">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> used for the decryption.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm">
            <summary>
            An algorithm used for encryption and decryption.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.Rsa15">
            <summary>
            Gets an RSA1_5 <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.RsaOaep">
            <summary>
            Gets an RSA-OAEP <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.RsaOaep256">
            <summary>
            Gets an RSA-OAEP256 <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128Gcm">
            <summary>
            Gets a 128-bit AES-GCM <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192Gcm">
            <summary>
            Gets a 192-bit AES-GCM <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256Gcm">
            <summary>
            Gets a 256-bit AES-GCM <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128Cbc">
            <summary>
            Gets a 128-bit AES-CBC <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192Cbc">
            <summary>
            Gets a 192-bit AES-CBC <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256Cbc">
            <summary>
            Gets a 256-bit AES-CBC <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128CbcPad">
            <summary>
            Gets a 128-bit AES-CBC <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> with PKCS padding.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192CbcPad">
            <summary>
            Gets a 192-bit AES-CBC <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> with PKCS padding.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256CbcPad">
            <summary>
            Gets a 256-bit AES-CBC <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> with PKCS padding.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.op_Equality(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.op_Inequality(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.op_Implicit(System.String)~Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.Equals(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters">
            <summary>
            Parameters for encrypting plaintext.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.Rsa15Parameters(System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.Rsa15" /> encryption algorithm.
            </summary>
            <param name="plaintext">The plaintext to encrypt.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.Rsa15" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.RsaOaepParameters(System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.RsaOaep" /> encryption algorithm.
            </summary>
            <param name="plaintext">The plaintext to encrypt.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.RsaOaep" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.RsaOaep256Parameters(System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.RsaOaep256" /> encryption algorithm.
            </summary>
            <param name="plaintext">The plaintext to encrypt.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.RsaOaep256" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.A128GcmParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128Gcm" /> encryption algorithm.
            The nonce will be generated automatically and returned in the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult" /> after encryption.
            </summary>
            <param name="plaintext">The plaintext to encrypt.</param>
            <param name="additionalAuthenticatedData">Optional data that is authenticated but not encrypted.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128Gcm" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.A192GcmParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192Gcm" /> encryption algorithm.
            The nonce will be generated automatically and returned in the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult" /> after encryption.
            </summary>
            <param name="plaintext">The plaintext to encrypt.</param>
            <param name="additionalAuthenticatedData">Optional data that is authenticated but not encrypted.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192Gcm" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.A256GcmParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256Gcm" /> encryption algorithm.
            The nonce will be generated automatically and returned in the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult" /> after encryption.
            </summary>
            <param name="plaintext">The plaintext to encrypt.</param>
            <param name="additionalAuthenticatedData">Optional data that is authenticated but not encrypted.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256Gcm" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.A128CbcParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128Cbc" /> encryption algorithm.
            </summary>
            <param name="plaintext">The plaintext to encrypt.</param>
            <param name="iv">Optional initialization vector. If null, a cryptographically random initialization vector will be generated using <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128Cbc" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.A192CbcParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192Cbc" /> encryption algorithm.
            </summary>
            <param name="plaintext">The plaintext to encrypt.</param>
            <param name="iv">Optional initialization vector. If null, a cryptographically random initialization vector will be generated using <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192Cbc" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.A256CbcParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256Cbc" /> encryption algorithm.
            </summary>
            <param name="plaintext">The plaintext to encrypt.</param>
            <param name="iv">Optional initialization vector. If null, a cryptographically random initialization vector will be generated using <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256Cbc" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.A128CbcPadParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128CbcPad" /> encryption algorithm with PKCS#7 padding.
            </summary>
            <param name="plaintext">The plaintext to encrypt.</param>
            <param name="iv">Optional initialization vector. If null, a cryptographically random initialization vector will be generated using <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128CbcPad" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.A192CbcPadParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192CbcPad" /> encryption algorithm with PKCS#7 padding.
            </summary>
            <param name="plaintext">The plaintext to encrypt.</param>
            <param name="iv">Optional initialization vector. If null, a cryptographically random initialization vector will be generated using <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192CbcPad" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.A256CbcPadParameters(System.Byte[],System.Byte[])">
            <summary>
            Creates an instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256CbcPad" /> encryption algorithm with PKCS#7 padding.
            </summary>
            <param name="plaintext">The plaintext to encrypt.</param>
            <param name="iv">Optional initialization vector. If null, a cryptographically random initialization vector will be generated using <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</param>
            <returns>An instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256CbcPad" /> encryption algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.Algorithm">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.Plaintext">
            <summary>
            Gets the plaintext to encrypt.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.Iv">
            <summary>
            Gets the initialization vector for encryption.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.AdditionalAuthenticatedData">
            <summary>
            Gets additional data that is authenticated during decryption but not encrypted.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult">
            <summary>
            Represents information about an encryption operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.KeyId">
            <summary>
            Gets the key identifier of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> used to encrypt. This must be stored alongside the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.Ciphertext" /> as the same key must be used to decrypt it.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.Ciphertext">
            <summary>
            Gets the ciphertext that is the result of the encryption.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.Iv">
            <summary>
            Gets the initialization vector for encryption.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.AuthenticationTag">
            <summary>
            Gets the authentication tag resulting from encryption with a symmetric key including <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A128Gcm" />, <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A192Gcm" />, or <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm.A256Gcm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.AdditionalAuthenticatedData">
            <summary>
            Gets additional data that is authenticated during decryption but not encrypted.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.Algorithm">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm" /> used for encryption. This must be stored alongside the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.Ciphertext" /> as the same algorithm must be used to decrypt it.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.KeyResolver">
            <summary>
            Azure Key Vault KeyResolver. This class resolves Key Vault Key Identifiers and
            Secret Identifiers to create <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> instances capable of performing
            cryptographic operations with the key. Secret Identifiers can only be resolved if the Secret is
            a byte array with a length matching one of the AES key lengths (128, 192, 256) and the
            content-type of the secret is application/octet-stream.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyResolver" /> class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyResolver.#ctor(Azure.Core.TokenCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyResolver" /> class.
            </summary>
            <param name="credential">A <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests to the vault, such as DefaultAzureCredential.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="credential" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyResolver.#ctor(Azure.Core.TokenCredential,Azure.Security.KeyVault.Keys.Cryptography.CryptographyClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyResolver" /> class.
            </summary>
            <param name="credential">A <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests to the vault, such as DefaultAzureCredential.</param>
            <param name="options">Options to configure the management of the requests sent to Key Vault for both the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyResolver" /> instance as well as all created instances of <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="credential" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyResolver.Resolve(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Retrieves a <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> capable of performing cryptographic operations with the key represented by the specified <paramref name="keyId" />.
            </summary>
            <param name="keyId">The key identifier of the key used by the created <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" />. You should validate that this URI references a valid Key Vault or Managed HSM resource. See https://aka.ms/azsdk/blog/vault-uri for details.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A new <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> capable of performing cryptographic operations with the key represented by the specified <paramref name="keyId" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyId" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyResolver.ResolveAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Retrieves a <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> capable of performing cryptographic operations with the key represented by the specified <paramref name="keyId" />.
            </summary>
            <param name="keyId">The key identifier of the key used by the created <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" />.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A new <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> capable of performing cryptographic operations with the key represented by the specified <paramref name="keyId" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyId" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyResolver.Azure#Core#Cryptography#IKeyEncryptionKeyResolver#Resolve(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the key encryption key corresponding to the specified keyId.
            </summary><param name="keyId">The key identifier of the key encryption key to retrieve.</param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param><returns>The key encryption key corresponding to the specified keyId.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyResolver.Azure#Core#Cryptography#IKeyEncryptionKeyResolver#ResolveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the key encryption key corresponding to the specified keyId.
            </summary><param name="keyId">The key identifier of the key encryption key to retrieve.</param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param><returns>The key encryption key corresponding to the specified keyId.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm">
            <summary>
            An algorithm used for key wrap and unwrap.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.RsaOaep">
            <summary>
            Gets an RSA-OAEP <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.Rsa15">
            <summary>
            Gets an RSA1_5 <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.RsaOaep256">
            <summary>
            Gets an RSA-OAEP-256 <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.A128KW">
            <summary>
            Gets an AES 128 Key Wrap <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.A192KW">
            <summary>
            Gets an AES 192 Key Wrap <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.A256KW">
            <summary>
            Gets an AES 256 Key Wrap <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.op_Equality(Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm,Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.op_Inequality(Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm,Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.op_Implicit(System.String)~Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.Equals(Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.LocalCryptographyClientOptions">
            <summary>
            Options that allow you to configure the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> for local-only operations.
            </summary>
            <remarks>
            Properties to configure remote features such as <see cref="P:Azure.Core.ClientOptions.Retry" /> and <see cref="P:Azure.Core.ClientOptions.Transport" /> are ignored.
            When <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> is created with an instance of <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.LocalCryptographyClientOptions" /> it can only perform operations locally.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.LocalCryptographyClientOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.LocalCryptographyClientOptions" /> class.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm">
            <summary>
            An algorithm used for signing and verification.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.RS256">
            <summary>
            Gets an RSA SHA-256 <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.RS384">
            <summary>
            Gets an RSA SHA-384  <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.RS512">
            <summary>
            Gets an RSA SHA-512  <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.PS256">
            <summary>
            Gets an RSASSA-PSS using SHA-256 and MGF1 with SHA-256 <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.PS384">
            <summary>
            Gets an RSASSA-PSS using SHA-384 and MGF1 with SHA-384 <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.PS512">
            <summary>
            Gets an RSASSA-PSS using SHA-512 and MGF1 with SHA-512 <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.ES256">
            <summary>
            Gets an ECDSA with a P-256 curve <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.ES384">
            <summary>
            Gets an ECDSA with a P-384 curve <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.ES512">
            <summary>
            Gets an ECDSA with a P-521 curve <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.ES256K">
            <summary>
            Gets an ECDSA with a secp256k1 curve <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.op_Equality(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.op_Inequality(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.op_Implicit(System.String)~Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.Equals(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.SignResult">
            <summary>
            Represents information about a sign operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignResult.KeyId">
            <summary>
            Gets the key identifier of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> used to sign. This must be stored alongside the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.SignResult.Signature" /> as the same key must be used to verify it.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignResult.Signature">
            <summary>
            Gets the signature.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.SignResult.Algorithm">
            <summary>
            Gets the algorithm used to sign. This must be stored alongside the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.SignResult.Signature" /> as the same algorithm must be used to verify it.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.UnwrapResult">
            <summary>
            Represents information about an unwrap operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.UnwrapResult.KeyId">
            <summary>
            Gets the key identifier of the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.UnwrapResult.Key" /> used to uwrap.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.UnwrapResult.Key">
            <summary>
            Gets the unwrapped key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.UnwrapResult.Algorithm">
            <summary>
            Gets the algorithm used.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult">
            <summary>
            Represents information about a verify operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult.KeyId">
            <summary>
            Gets the key identifier of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> used to verify.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult.IsValid">
            <summary>
            Gets a value indicating whether the specified signature is valid.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult.Algorithm">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm" />.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.Cryptography.WrapResult">
            <summary>
            Represents information about a wrap operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.WrapResult.KeyId">
            <summary>
            Gets the key identifier of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> used to wrap the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.WrapResult.EncryptedKey" />. This must be stored alongside the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.WrapResult.EncryptedKey" /> as the same key must be used to unwrap it.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.WrapResult.EncryptedKey">
            <summary>
            Gets the wrapped key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.Cryptography.WrapResult.Algorithm">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm" /> used. This must be stored alongside the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.WrapResult.EncryptedKey" /> as the same key must be used to unwrap it.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.CryptographyModelFactory">
            <summary>
            Model factory that enables mocking for the Key Vault Cryptography library.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CryptographyModelFactory.DecryptParameters(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for mocking purposes.
            </summary>
            <param name="algorithm">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.Algorithm" /> property.</param>
            <param name="ciphertext">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.Ciphertext" /> property.</param>
            <param name="iv">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.Iv" /> property.</param>
            <param name="authenticationTag">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.AuthenticationTag" /> property.</param>
            <param name="additionalAuthenticatedData">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.AdditionalAuthenticatedData" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters" /> class for mocking purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ciphertext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CryptographyModelFactory.DecryptResult(System.String,System.Byte[],Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult" /> class for mocking purposes.
            </summary>
            <param name="keyId">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult.KeyId" /> property.</param>
            <param name="plaintext">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult.Plaintext" /> property.</param>
            <param name="algorithm">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult.Algorithm" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.DecryptResult" /> class for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CryptographyModelFactory.EncryptParameters(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for mocking purposes.
            </summary>
            <param name="algorithm">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.Algorithm" /> property.</param>
            <param name="plaintext">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters.Plaintext" /> property.</param>
            <param name="iv">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.Iv" /> property.</param>
            <param name="additionalAuthenticatedData">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.DecryptParameters.AdditionalAuthenticatedData" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptParameters" /> class for mocking purposes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plaintext" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CryptographyModelFactory.EncryptResult(System.String,System.Byte[],Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult" /> class for mocking purposes.
            </summary>
            <param name="keyId">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.KeyId" /> property.</param>
            <param name="ciphertext">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.Ciphertext" /> property.</param>
            <param name="algorithm">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.Algorithm" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult" /> class for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CryptographyModelFactory.EncryptResult(System.String,System.Byte[],Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult" /> class for mocking purposes.
            </summary>
            <param name="keyId">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.KeyId" /> property.</param>
            <param name="ciphertext">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.Ciphertext" /> property.</param>
            <param name="algorithm">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult.Algorithm" /> property.</param>
            <param name="iv">Sets the initialization vector for encryption.</param>
            <param name="authenticatedTag">Sets the authenticated tag resulting from encryption with a symmetric key using AES.</param>
            <param name="additionalAuthenticatedData">Sets additional data that is authenticated during decryption but not encrypted.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.EncryptResult" /> class for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CryptographyModelFactory.SignResult(System.String,System.Byte[],Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignResult" /> class for mocking purposes.
            </summary>
            <param name="keyId">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.SignResult.KeyId" /> property.</param>
            <param name="signature">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.SignResult.Signature" /> property.</param>
            <param name="algorithm">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.SignResult.Algorithm" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.SignResult" /> class for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CryptographyModelFactory.UnwrapResult(System.String,System.Byte[],Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.UnwrapResult" /> class for mocking purposes.
            </summary>
            <param name="keyId">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.UnwrapResult.KeyId" /> property.</param>
            <param name="key">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.UnwrapResult.Key" /> property.</param>
            <param name="algorithm">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.UnwrapResult.Algorithm" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.UnwrapResult" /> class for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CryptographyModelFactory.VerifyResult(System.String,System.Boolean,Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult" /> class for mocking purposes.
            </summary>
            <param name="keyId">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult.KeyId" /> property.</param>
            <param name="isValid">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult.IsValid" /> property.</param>
            <param name="algorithm">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult.Algorithm" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.VerifyResult" /> class for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.CryptographyModelFactory.WrapResult(System.String,System.Byte[],Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.WrapResult" /> class for mocking purposes.
            </summary>
            <param name="keyId">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.WrapResult.KeyId" /> property.</param>
            <param name="key">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.WrapResult.EncryptedKey" /> property.</param>
            <param name="algorithm">Sets the <see cref="P:Azure.Security.KeyVault.Keys.Cryptography.WrapResult.Algorithm" /> property.</param>
            <returns>A new instance of the <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.WrapResult" /> class for mocking purposes.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.DeletedKey">
            <summary>
            Represents a Key Vault key that has been deleted, allowing it to be recovered, if needed.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.DeletedKey.RecoveryId">
            <summary>
            Gets a <see cref="T:System.Uri" /> of the deleted key that can be used to recover it.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.DeletedKey.DeletedOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the key was deleted.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.DeletedKey.ScheduledPurgeDate">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> for when the deleted key will be purged.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.DeleteKeyOperation">
            <summary>
            A long-running operation for <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.StartDeleteKey(System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.StartDeleteKeyAsync(System.String,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.DeleteKeyOperation.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Keys.DeleteKeyOperation" /> for mocking. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.DeleteKeyOperation.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.DeleteKeyOperation.Value">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Keys.DeletedKey" />.
            You should await <see cref="M:Azure.Security.KeyVault.Keys.DeleteKeyOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" /> before attempting to purge or recover a key in this pending state.
            </summary>
            <remarks>
            Azure Key Vault will return a <see cref="T:Azure.Security.KeyVault.Keys.DeletedKey" /> immediately but may take time to actually delete the key if soft-delete is enabled.
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.DeleteKeyOperation.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.DeleteKeyOperation.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.DeleteKeyOperation.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.DeleteKeyOperation.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.DeleteKeyOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.DeleteKeyOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.DeleteKeyOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.ImportKeyOptions">
            <summary>
            The properties needed to import a key.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.ImportKeyOptions.#ctor(System.String,Azure.Security.KeyVault.Keys.JsonWebKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.ImportKeyOptions" /> class.
            </summary>
            <param name="name">The name of the key to import.</param>
            <param name="keyMaterial">A <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> containing properties of the key to import.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> or <paramref name="keyMaterial" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.ImportKeyOptions.Name">
            <summary>
            Gets the name of the key to import.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.ImportKeyOptions.Key">
            <summary>
            Gets the cryptographic key, the key type, and the operations you can perform using the key.
            </summary>
            <remarks>
            See http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18 for specifications of a JSON web key.
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.ImportKeyOptions.HardwareProtected">
            <summary>
            Gets or sets a value indicating whether to import the key into a hardware security module (HSM).
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.ImportKeyOptions.Properties">
            <summary>
            Gets additional properties of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" />.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.JsonWebKey">
            <summary>
            A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data
            structure that represents a cryptographic key.
            For more information, see <see href="http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18">JSON Web Key (JWK)</see>.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.Id">
            <summary>
            Gets the identifier of the key. This is not limited to a <see cref="T:System.Uri" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.KeyType">
            <summary>
            Gets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.KeyType" /> for this <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.KeyOps">
            <summary>
            Gets a list of <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> values supported by this key.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.JsonWebKey.#ctor(System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Keys.KeyOperation})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> class with the given key operations.
            </summary>
            <param name="keyOps">
            A list of supported <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> values.
            If null, no operations will be permitted and subsequent cryptography operations may fail.
            </param>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.JsonWebKey.#ctor(System.Security.Cryptography.Aes,System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Keys.KeyOperation})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> class using type <see cref="P:Azure.Security.KeyVault.Keys.KeyType.Oct" />.
            </summary>
            <param name="aesProvider">An <see cref="T:System.Security.Cryptography.Aes" /> provider.</param>
            <param name="keyOps">
            Optional list of supported <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> values. If null, the default for the key type is used, including:
            <see cref="P:Azure.Security.KeyVault.Keys.KeyOperation.Encrypt" />, <see cref="P:Azure.Security.KeyVault.Keys.KeyOperation.Decrypt" />, <see cref="P:Azure.Security.KeyVault.Keys.KeyOperation.WrapKey" />, and <see cref="P:Azure.Security.KeyVault.Keys.KeyOperation.UnwrapKey" />.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="aesProvider" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.JsonWebKey.#ctor(System.Security.Cryptography.ECDsa,System.Boolean,System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Keys.KeyOperation})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> class using type <see cref="P:Azure.Security.KeyVault.Keys.KeyType.Ec" />.
            </summary>
            <param name="ecdsa">An <see cref="T:System.Security.Cryptography.ECDsa" /> provider.</param>
            <param name="includePrivateParameters">Whether to include the private key.</param>
            <param name="keyOps">
            Optional list of supported <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> values. If null, the default for the key type is used, including:
            <see cref="P:Azure.Security.KeyVault.Keys.KeyOperation.Sign" />, and <see cref="P:Azure.Security.KeyVault.Keys.KeyOperation.Decrypt" /> if <paramref name="includePrivateParameters" /> is true.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ecdsa" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The elliptic curve name is invalid.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.JsonWebKey.#ctor(System.Security.Cryptography.RSA,System.Boolean,System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Keys.KeyOperation})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> class using type <see cref="P:Azure.Security.KeyVault.Keys.KeyType.Rsa" />.
            </summary>
            <param name="rsaProvider">An <see cref="T:System.Security.Cryptography.RSA" /> provider.</param>
            <param name="includePrivateParameters">Whether to include the private key.</param>
            <param name="keyOps">
            Optional list of supported <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> values. If null, the default for the key type is used, including:
            <see cref="P:Azure.Security.KeyVault.Keys.KeyOperation.Encrypt" />, <see cref="P:Azure.Security.KeyVault.Keys.KeyOperation.Verify" />, and <see cref="P:Azure.Security.KeyVault.Keys.KeyOperation.WrapKey" />;
            and <see cref="P:Azure.Security.KeyVault.Keys.KeyOperation.Decrypt" />, <see cref="P:Azure.Security.KeyVault.Keys.KeyOperation.Sign" />, and <see cref="P:Azure.Security.KeyVault.Keys.KeyOperation.UnwrapKey" /> if <paramref name="includePrivateParameters" /> is true.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rsaProvider" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.N">
            <summary>
            Gets the RSA modulus.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.E">
            <summary>
            Gets RSA public exponent.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.DP">
            <summary>
            Gets the RSA private key parameter.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.DQ">
            <summary>
            Gets the RSA private key parameter.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.QI">
            <summary>
            Gets the RSA private key parameter.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.P">
            <summary>
            Gets the RSA secret prime.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.Q">
            <summary>
            Gets the RSA secret prime.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.CurveName">
            <summary>
            Gets the name of the elliptical curve.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.X">
            <summary>
            Gets the X coordinate of the elliptic curve point.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.Y">
            <summary>
            Gets the Y coordinate for the elliptic curve point.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.D">
            <summary>
            Gets the RSA private exponent or EC private key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.K">
            <summary>
            Gets the symmetric key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.JsonWebKey.T">
            <summary>
            Gets the protected key used with "Bring Your Own Key".
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.JsonWebKey.ToAes">
            <summary>
            Converts this <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> of type <see cref="P:Azure.Security.KeyVault.Keys.KeyType.Oct" /> or <see cref="P:Azure.Security.KeyVault.Keys.KeyType.OctHsm" /> to an <see cref="T:System.Security.Cryptography.Aes" /> object.
            </summary>
            <returns>An <see cref="T:System.Security.Cryptography.Aes" /> object.</returns>
            <exception cref="T:System.InvalidOperationException">This key is not of type <see cref="P:Azure.Security.KeyVault.Keys.KeyType.Oct" /> or <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.K" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.JsonWebKey.ToECDsa(System.Boolean)">
            <summary>
            Converts this <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> of type <see cref="P:Azure.Security.KeyVault.Keys.KeyType.Ec" /> or <see cref="P:Azure.Security.KeyVault.Keys.KeyType.EcHsm" /> to an <see cref="T:System.Security.Cryptography.ECDsa" /> object.
            </summary>
            <param name="includePrivateParameters">Whether to include private parameters.</param>
            <returns>An <see cref="T:System.Security.Cryptography.ECDsa" /> object.</returns>
            <exception cref="T:System.InvalidOperationException">This key is not of type <see cref="P:Azure.Security.KeyVault.Keys.KeyType.Ec" /> or <see cref="P:Azure.Security.KeyVault.Keys.KeyType.EcHsm" />, or one or more key parameters are invalid.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.JsonWebKey.ToRSA(System.Boolean)">
            <summary>
            Converts this <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> of type <see cref="P:Azure.Security.KeyVault.Keys.KeyType.Rsa" /> or <see cref="P:Azure.Security.KeyVault.Keys.KeyType.RsaHsm" /> to an <see cref="T:System.Security.Cryptography.RSA" /> object.
            </summary>
            <param name="includePrivateParameters">Whether to include private parameters.</param>
            <returns>An <see cref="T:System.Security.Cryptography.RSA" /> object.</returns>
            <exception cref="T:System.InvalidOperationException">This key is not of type <see cref="P:Azure.Security.KeyVault.Keys.KeyType.Rsa" /> or <see cref="P:Azure.Security.KeyVault.Keys.KeyType.RsaHsm" />, or one or more key parameters are invalid.</exception>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.JsonWebKeyConverter">
            <summary>
            Converts a <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> to or from JSON.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.JsonWebKeyConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <typeparamref name="T" />.</summary><param name="reader">The reader.</param><param name="typeToConvert">The type to convert.</param><param name="options">An object that specifies serialization options to use.</param><returns>The converted value.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.JsonWebKeyConverter.Write(System.Text.Json.Utf8JsonWriter,Azure.Security.KeyVault.Keys.JsonWebKey,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary><param name="writer">The writer to write to.</param><param name="value">The value to convert to JSON.</param><param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyClient">
            <summary>
            The KeyClient provides synchronous and asynchronous methods to manage <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> in the Azure Key Vault. The client
            supports creating, retrieving, updating, deleting, purging, backing up, restoring, and listing the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" />.
            The client also supports listing <see cref="T:Azure.Security.KeyVault.Keys.DeletedKey" /> for a soft-delete enabled Azure Key Vault.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" /> class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.#ctor(System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" /> class for the specified vault.
            </summary>
            <param name="vaultUri">
            A <see cref="T:System.Uri" /> to the vault on which the client operates. Appears as "DNS Name" in the Azure portal.
            If you have a key <see cref="T:System.Uri" />, use <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier" /> to parse the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.VaultUri" /> and other information.
            You should validate that this URI references a valid Key Vault or Managed HSM resource. See https://aka.ms/azsdk/blog/vault-uri for details.
            </param>
            <param name="credential">A <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests to the vault, such as DefaultAzureCredential.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vaultUri" /> or <paramref name="credential" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Security.KeyVault.Keys.KeyClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" /> class for the specified vault.
            </summary>
            <param name="vaultUri">
            A <see cref="T:System.Uri" /> to the vault on which the client operates. Appears as "DNS Name" in the Azure portal.
            If you have a key <see cref="T:System.Uri" />, use <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier" /> to parse the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.VaultUri" /> and other information.
            You should validate that this URI references a valid Key Vault or Managed HSM resource. See https://aka.ms/azsdk/blog/vault-uri for details.
            </param>
            <param name="credential">A <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests to the vault, such as DefaultAzureCredential.</param>
            <param name="options"><see cref="T:Azure.Security.KeyVault.Keys.KeyClientOptions" /> that allow to configure the management of the request sent to Key Vault.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vaultUri" /> or <paramref name="credential" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyClient.VaultUri">
            <summary>
            Gets the <see cref="T:System.Uri" /> of the vault used to create this instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.CreateKey(System.String,Azure.Security.KeyVault.Keys.KeyType,Azure.Security.KeyVault.Keys.CreateKeyOptions,System.Threading.CancellationToken)">
            <summary>
            Creates and stores a new key in Key Vault. The create key operation can be used to create any key type in Azure Key Vault.
            If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/create permission.
            </summary>
            <param name="name">The name of the key.</param>
            <param name="keyType">The type of key to create. See <see cref="T:Azure.Security.KeyVault.Keys.KeyType" /> for valid values.</param>
            <param name="keyOptions">Specific attributes with information about the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string, or <paramref name="keyType" /> contains no value.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.CreateKeyAsync(System.String,Azure.Security.KeyVault.Keys.KeyType,Azure.Security.KeyVault.Keys.CreateKeyOptions,System.Threading.CancellationToken)">
            <summary>
            Creates and stores a new key in Key Vault. The create key operation can be used to create any key type in Azure Key Vault.
            If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/create permission.
            </summary>
            <param name="name">The name of the key.</param>
            <param name="keyType">The type of key to create. See <see cref="T:Azure.Security.KeyVault.Keys.KeyType" /> for valid values.</param>
            <param name="keyOptions">Specific attributes with information about the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string, or <paramref name="keyType" /> contains no value.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.CreateEcKey(Azure.Security.KeyVault.Keys.CreateEcKeyOptions,System.Threading.CancellationToken)">
            <summary>
            Creates and stores a new Elliptic Curve key in Key Vault. If the named key already exists,
            Azure Key Vault creates a new version of the key. This operation requires the keys/create permission.
            </summary>
            <param name="ecKeyOptions">The key options object containing information about the Elliptic Curve key being created.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ecKeyOptions" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.CreateEcKeyAsync(Azure.Security.KeyVault.Keys.CreateEcKeyOptions,System.Threading.CancellationToken)">
            <summary>
            Creates and stores a new Elliptic Curve key in Key Vault. If the named key already exists,
            Azure Key Vault creates a new version of the key. This operation requires the keys/create permission.
            </summary>
            <param name="ecKeyOptions">The key options object containing information about the Elliptic Curve key being created.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ecKeyOptions" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.CreateRsaKey(Azure.Security.KeyVault.Keys.CreateRsaKeyOptions,System.Threading.CancellationToken)">
            <summary>
            Creates and stores a new RSA key in Key Vault. If the named key already exists, Azure Key Vault creates a new
            version of the key. This operation requires the keys/create permission.
            </summary>
            <param name="rsaKeyOptions">The key options object containing information about the RSA key being created.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rsaKeyOptions" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.CreateRsaKeyAsync(Azure.Security.KeyVault.Keys.CreateRsaKeyOptions,System.Threading.CancellationToken)">
            <summary>
            Creates and stores a new RSA key in Key Vault. If the named key already exists, Azure Key Vault creates a new
            version of the key. This operation requires the keys/create permission.
            </summary>
            <param name="rsaKeyOptions">The key options object containing information about the RSA key being created.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rsaKeyOptions" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.CreateOctKey(Azure.Security.KeyVault.Keys.CreateOctKeyOptions,System.Threading.CancellationToken)">
            <summary>
            Creates and stores a new AES key in Key Vault. If the named key already exists, Azure Key Vault creates a new
            version of the key. This operation requires the keys/create permission.
            </summary>
            <param name="octKeyOptions">The key options object containing information about the AES key being created.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="octKeyOptions" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.CreateOctKeyAsync(Azure.Security.KeyVault.Keys.CreateOctKeyOptions,System.Threading.CancellationToken)">
            <summary>
            Creates and stores a new AES key in Key Vault. If the named key already exists, Azure Key Vault creates a new
            version of the key. This operation requires the keys/create permission.
            </summary>
            <param name="octKeyOptions">The key options object containing information about the AES key being created.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="octKeyOptions" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.UpdateKeyProperties(Azure.Security.KeyVault.Keys.KeyProperties,System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Keys.KeyOperation},System.Threading.CancellationToken)">
            <summary>
            The update key operation changes specified attributes of a stored key and
            can be applied to any key type and key version stored in Azure Key Vault.
            </summary>
            <remarks>
            In order to perform this operation, the key must already exist in the Key
            Vault. Note: The cryptographic material of a key itself cannot be changed.
            This operation requires the keys/update permission.
            </remarks>
            <param name="properties">The <see cref="T:Azure.Security.KeyVault.Keys.KeyProperties" /> object with updated properties.</param>
            <param name="keyOperations">Optional list of supported <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" />. If null, no changes will be made to existing key operations.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="properties" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.UpdateKeyPropertiesAsync(Azure.Security.KeyVault.Keys.KeyProperties,System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Keys.KeyOperation},System.Threading.CancellationToken)">
            <summary>
            The update key operation changes specified attributes of a stored key and
            can be applied to any key type and key version stored in Azure Key Vault.
            </summary>
            <remarks>
            In order to perform this operation, the key must already exist in the Key
            Vault. Note: The cryptographic material of a key itself cannot be changed.
            This operation requires the keys/update permission.
            </remarks>
            <param name="properties">The <see cref="T:Azure.Security.KeyVault.Keys.KeyProperties" /> object with updated properties.</param>
            <param name="keyOperations">Optional list of supported <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" />. If null, no changes will be made to existing key operations.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="properties" /> or <paramref name="keyOperations" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetKey(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the public part of a stored key.
            </summary>
            <remarks>
            The get key operation is applicable to all key types. If the requested key
            is symmetric, then no key is released in the response. This
            operation requires the keys/get permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="version">The version of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetKeyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the public part of a stored key.
            </summary>
            <remarks>
            The get key operation is applicable to all key types. If the requested key
            is symmetric, then no key is released in the response. This
            operation requires the keys/get permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="version">The version of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetPropertiesOfKeys(System.Threading.CancellationToken)">
            <summary>
            Lists the properties of all enabled and disabled keys in the specified vault. You can use the returned <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Name" /> in subsequent calls to <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.GetKey(System.String,System.String,System.Threading.CancellationToken)" />.
            </summary>
            <remarks>
            <para>
            Retrieves a list of the keys in the Key Vault that contains the public part of a stored key.
            The list operation is applicable to all key types, however only the base key identifier,
            attributes, and tags are provided in the response. Individual versions of a
            key are not listed in the response. This operation requires the keys/list
            permission.
            </para>
            <para>
            Managed keys may also be listed. They are the public key for certificates stored in Key Vault.
            </para>
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetPropertiesOfKeysAsync(System.Threading.CancellationToken)">
            <summary>
            Lists the properties of all enabled and disabled keys in the specified vault. You can use the returned <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Name" /> in subsequent calls to <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.GetKeyAsync(System.String,System.String,System.Threading.CancellationToken)" />.
            </summary>
            <remarks>
            <para>
            Retrieves a list of the keys in the Key Vault that contains the public part of a stored key.
            The list operation is applicable to all key types, however only the base key identifier,
            attributes, and tags are provided in the response. Individual versions of a
            key are not listed in the response. This operation requires the keys/list
            permission.
            </para>
            <para>
            Managed keys may also be listed. They are the public key for certificates stored in Key Vault.
            </para>
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetPropertiesOfKeyVersions(System.String,System.Threading.CancellationToken)">
            <summary>
            Lists the properties of all enabled and disabled versions of the specified key. You can use the returned <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Name" /> and <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Version" /> in subsequent calls to <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.GetKey(System.String,System.String,System.Threading.CancellationToken)" />.
            </summary>
            <remarks>
            The full key identifier, attributes, and tags are provided in the response.
            This operation requires the keys/list permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetPropertiesOfKeyVersionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Lists the properties of all enabled and disabled versions of the specified key. You can use the returned <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Name" /> and <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Version" /> in subsequent calls to <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.GetKeyAsync(System.String,System.String,System.Threading.CancellationToken)" />.
            </summary>
            <remarks>
            The full key identifier, attributes, and tags are provided in the response.
            This operation requires the keys/list permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetDeletedKey(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the public part of a deleted key.
            </summary>
            <remarks>
            The Get Deleted Key operation is applicable for soft-delete enabled vaults.
            While the operation can be invoked on any vault, it will return an error if
            invoked on a non soft-delete enabled vault. This operation requires the
            keys/get permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetDeletedKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the public part of a deleted key.
            </summary>
            <remarks>
            The Get Deleted Key operation is applicable for soft-delete enabled vaults.
            While the operation can be invoked on any vault, it will return an error if
            invoked on a non soft-delete enabled vault. This operation requires the
            keys/get permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.StartDeleteKey(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a key of any type from storage in Azure Key Vault.
            </summary>
            <remarks>
            The delete key operation cannot be used to remove individual versions of a
            key. This operation removes the cryptographic material associated with the
            key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or
            Encrypt/Decrypt operations. This operation requires the keys/delete
            permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A <see cref="T:Azure.Security.KeyVault.Keys.DeleteKeyOperation" /> to wait on this long-running operation.
            If the Key Vault is soft delete-enabled, you only need to wait for the operation to complete if you need to recover or purge the key;
            otherwise, the key is deleted automatically on the <see cref="P:Azure.Security.KeyVault.Keys.DeletedKey.ScheduledPurgeDate" />.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.StartDeleteKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a key of any type from storage in Azure Key Vault.
            </summary>
            <remarks>
            The delete key operation cannot be used to remove individual versions of a
            key. This operation removes the cryptographic material associated with the
            key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or
            Encrypt/Decrypt operations. This operation requires the keys/delete
            permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A <see cref="T:Azure.Security.KeyVault.Keys.DeleteKeyOperation" /> to wait on this long-running operation.
            If the Key Vault is soft delete-enabled, you only need to wait for the operation to complete if you need to recover or purge the key;
            otherwise, the key is deleted automatically on the <see cref="P:Azure.Security.KeyVault.Keys.DeletedKey.ScheduledPurgeDate" />.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetDeletedKeys(System.Threading.CancellationToken)">
            <summary>
            Lists the deleted keys in the specified vault.
            </summary>
            <remarks>
            Retrieves a list of the keys in the Key Vault that contains the public part of a deleted key.
            This operation includes deletion-specific information.
            The Get Deleted Keys operation is applicable
            for vaults enabled for soft-delete. While the operation can be invoked on
            any vault, it will return an error if invoked on a non soft-delete enabled
            vault. This operation requires the keys/list permission.
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetDeletedKeysAsync(System.Threading.CancellationToken)">
            <summary>
            Lists the deleted keys in the specified vault.
            </summary>
            <remarks>
            Retrieves a list of the keys in the Key Vault that contains the public part of a deleted key.
            This operation includes deletion-specific information.
            The Get Deleted Keys operation is applicable
            for vaults enabled for soft-delete. While the operation can be invoked on
            any vault, it will return an error if invoked on a non soft-delete enabled
            vault. This operation requires the keys/list permission.
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.PurgeDeletedKey(System.String,System.Threading.CancellationToken)">
            <summary>
            Permanently deletes the specified key.
            </summary>
            <remarks>
            The Purge Deleted Key operation is applicable for soft-delete enabled
            vaults. While the operation can be invoked on any vault, it will return an
            error if invoked on a non soft-delete enabled vault. This operation
            requires the keys/purge permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.PurgeDeletedKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Permanently deletes the specified key.
            </summary>
            <remarks>
            The Purge Deleted Key operation is applicable for soft-delete enabled
            vaults. While the operation can be invoked on any vault, it will return an
            error if invoked on a non soft-delete enabled vault. This operation
            requires the keys/purge permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.StartRecoverDeletedKey(System.String,System.Threading.CancellationToken)">
            <summary>
            Recovers the deleted key to its latest version.
            </summary>
            <remarks>
            The Recover Deleted Key operation is applicable for deleted keys in
            soft-delete enabled vaults. It recovers the deleted key back to its latest
            version under /keys. An attempt to recover an non-deleted key will return
            an error. Consider this the inverse of the delete operation on soft-delete
            enabled vaults. This operation requires the keys/recover permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation" /> to wait on this long-running operation.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.StartRecoverDeletedKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Recovers the deleted key to its latest version.
            </summary>
            <remarks>
            The Recover Deleted Key operation is applicable for deleted keys in
            soft-delete enabled vaults. It recovers the deleted key back to its latest
            version under /keys. An attempt to recover an non-deleted key will return
            an error. Consider this the inverse of the delete operation on soft-delete
            enabled vaults. This operation requires the keys/recover permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation" /> to wait on this long-running operation.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.BackupKey(System.String,System.Threading.CancellationToken)">
            <summary>
            Requests that a backup of the specified key be downloaded to the client.
            </summary>
            <remarks>
            The Key Backup operation exports a key from Azure Key Vault in a protected
            form. Note that this operation does NOT return the actual key in a form that
            can be used outside the Azure Key Vault system, the returned key
            is either protected to a Azure Key Vault HSM or to Azure Key Vault itself.
            The intent of this operation is to allow a client to GENERATE a key in one
            Azure Key Vault instance, BACKUP the key, and then RESTORE it into another
            Azure Key Vault instance. The BACKUP operation may be used to export, in
            protected form, any key type from Azure Key Vault. Individual versions of a
            key cannot be backed up. BACKUP / RESTORE can be performed within
            geographical boundaries only; meaning that a BACKUP from one geographical
            area cannot be restored to another geographical area. For example, a backup
            from the US geographical area cannot be restored in an EU geographical
            area. This operation requires the key/backup permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.BackupKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Requests that a backup of the specified key be downloaded to the client.
            </summary>
            <remarks>
            The Key Backup operation exports a key from Azure Key Vault in a protected
            form. Note that this operation does NOT return the actual key in a form that
            can be used outside the Azure Key Vault system, the returned key
            is either protected to a Azure Key Vault HSM or to Azure Key Vault itself.
            The intent of this operation is to allow a client to GENERATE a key in one
            Azure Key Vault instance, BACKUP the key, and then RESTORE it into another
            Azure Key Vault instance. The BACKUP operation may be used to export, in
            protected form, any key type from Azure Key Vault. Individual versions of a
            key cannot be backed up. BACKUP / RESTORE can be performed within
            geographical boundaries only; meaning that a BACKUP from one geographical
            area cannot be restored to another geographical area. For example, a backup
            from the US geographical area cannot be restored in an EU geographical
            area. This operation requires the key/backup permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.RestoreKeyBackup(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Restores a backed up key to a vault.
            </summary>
            <remarks>
            Imports a previously backed up key into Azure Key Vault, restoring the key,
            its key identifier, attributes, and access control policies. The RESTORE
            operation may be used to import a previously backed up key. Individual
            versions of a key cannot be restored. The key is restored in its entirety
            with the same key name as it had when it was backed up. If the key name is
            not available in the target Key Vault, the RESTORE operation will be
            rejected. While the key name is retained during restore, the final key
            identifier will change if the key is restored to a different vault. Restore
            will restore all versions and preserve version identifiers. The RESTORE
            operation is subject to security constraints: The target Key Vault must be
            owned by the same Microsoft Azure Subscription as the source Key Vault The
            user must have RESTORE permission in the target Key Vault. This operation
            requires the keys/restore permission.
            </remarks>
            <param name="backup">The backup blob associated with a key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="backup" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="backup" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.RestoreKeyBackupAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Restores a backed up key to a vault.
            </summary>
            <remarks>
            Imports a previously backed up key into Azure Key Vault, restoring the key,
            its key identifier, attributes, and access control policies. The RESTORE
            operation may be used to import a previously backed up key. Individual
            versions of a key cannot be restored. The key is restored in its entirety
            with the same key name as it had when it was backed up. If the key name is
            not available in the target Key Vault, the RESTORE operation will be
            rejected. While the key name is retained during restore, the final key
            identifier will change if the key is restored to a different vault. Restore
            will restore all versions and preserve version identifiers. The RESTORE
            operation is subject to security constraints: The target Key Vault must be
            owned by the same Microsoft Azure Subscription as the source Key Vault The
            user must have RESTORE permission in the target Key Vault. This operation
            requires the keys/restore permission.
            </remarks>
            <param name="backup">The backup blob associated with a key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentException"><paramref name="backup" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="backup" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.ImportKey(System.String,Azure.Security.KeyVault.Keys.JsonWebKey,System.Threading.CancellationToken)">
            <summary>
            Imports an externally created key, stores it, and returns key parameters
            and attributes to the client.
            </summary>
            <remarks>
            The import key operation may be used to import any key type into an Azure
            Key Vault. If the named key already exists, Azure Key Vault creates a new
            version of the key. This operation requires the keys/import permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="keyMaterial">The <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> being imported.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> that was imported.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> or <paramref name="keyMaterial" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.ImportKeyAsync(System.String,Azure.Security.KeyVault.Keys.JsonWebKey,System.Threading.CancellationToken)">
            <summary>
            Imports an externally created key, stores it, and returns key parameters
            and attributes to the client.
            </summary>
            <remarks>
            The import key operation may be used to import any key type into an Azure
            Key Vault. If the named key already exists, Azure Key Vault creates a new
            version of the key. This operation requires the keys/import permission.
            </remarks>
            <param name="name">The name of the key.</param>
            <param name="keyMaterial">The <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> being imported.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> that was imported.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> or <paramref name="keyMaterial" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.ImportKey(Azure.Security.KeyVault.Keys.ImportKeyOptions,System.Threading.CancellationToken)">
            <summary>
            Imports an externally created key, stores it, and returns key parameters
            and attributes to the client.
            </summary>
            <remarks>
            The import key operation may be used to import any key type into an Azure
            Key Vault. If the named key already exists, Azure Key Vault creates a new
            version of the key. This operation requires the keys/import permission.
            </remarks>
            <param name="importKeyOptions">The key import configuration object containing information about the <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> being imported.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> that was imported.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="importKeyOptions" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.ImportKeyAsync(Azure.Security.KeyVault.Keys.ImportKeyOptions,System.Threading.CancellationToken)">
            <summary>
            Imports an externally created key, stores it, and returns key parameters
            and attributes to the client.
            </summary>
            <remarks>
            The import key operation may be used to import any key type into an Azure
            Key Vault. If the named key already exists, Azure Key Vault creates a new
            version of the key. This operation requires the keys/import permission.
            </remarks>
            <param name="importKeyOptions">The key import configuration object containing information about the <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> being imported.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> that was imported.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="importKeyOptions" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetRandomBytes(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the requested number of bytes containing random values from a managed hardware security module (HSM).
            </summary>
            <param name="count">The requested number of random bytes.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A byte array containing random values from a managed hardware security module (HSM).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" /> is less than 0.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetRandomBytesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the requested number of bytes containing random values from a managed hardware security module (HSM).
            </summary>
            <param name="count">The requested number of random bytes.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A byte array containing random values from a managed hardware security module (HSM).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" /> is less than 0.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.ReleaseKey(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Releases the latest version of a key.
            </summary>
            <param name="name">The name of the key to release.</param>
            <param name="targetAttestationToken">The attestation assertion for the target of the key release.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <remarks>
            The key must be exportable.
            This operation requires the keys/release permission.
            </remarks>
            <returns>The key release result containing the released key.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> or <paramref name="targetAttestationToken" /> contains an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> or <paramref name="targetAttestationToken" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.ReleaseKey(Azure.Security.KeyVault.Keys.ReleaseKeyOptions,System.Threading.CancellationToken)">
            <summary>
            Releases a key.
            </summary>
            <param name="options"><see cref="T:Azure.Security.KeyVault.Keys.ReleaseKeyOptions" /> containing the name, attestation assertion for the target, and additional options to release a key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <remarks>
            The key must be exportable.
            This operation requires the keys/release permission.
            </remarks>
            <returns>The key release result containing the released key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="options" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.ReleaseKeyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Releases the latest version of a key.
            </summary>
            <param name="name">The name of the key to release.</param>
            <param name="targetAttestationToken">The attestation assertion for the target of the key release.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <remarks>
            The key must be exportable.
            This operation requires the keys/release permission.
            </remarks>
            <returns>The key release result containing the released key.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> or <paramref name="targetAttestationToken" /> contains an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> or <paramref name="targetAttestationToken" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.ReleaseKeyAsync(Azure.Security.KeyVault.Keys.ReleaseKeyOptions,System.Threading.CancellationToken)">
            <summary>
            Releases a key.
            </summary>
            <param name="options"><see cref="T:Azure.Security.KeyVault.Keys.ReleaseKeyOptions" /> containing the name, attestation assertion for the target, and additional options to release a key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <remarks>
            The key must be exportable.
            This operation requires the keys/release permission.
            </remarks>
            <returns>The key release result containing the released key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="options" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetCryptographyClient(System.String,System.String)">
            <summary>
            Get a <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> for the given key.
            </summary>
            <param name="keyName">The name of the key used to perform cryptographic operations.</param>
            <param name="keyVersion">Optional version of the key used to perform cryptographic operations.</param>
            <returns>A <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> using the same options and pipeline as this <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" />.</returns>
            <remarks>
            <para>
            Given a key <paramref name="keyName" /> and optional <paramref name="keyVersion" />, a new <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> will be created
            using the same <see cref="P:Azure.Security.KeyVault.Keys.KeyClient.VaultUri" /> and options passed to this <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" />, including the <see cref="T:Azure.Security.KeyVault.Keys.KeyClientOptions.ServiceVersion" />,
            <see cref="P:Azure.Core.ClientOptions.Diagnostics" />, <see cref="P:Azure.Core.ClientOptions.Retry" />, and other options.
            </para>
            <para>
            If you want to create a <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> using a different Key Vault or Managed HSM endpoint, with different options, or even with a
            <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> you already have acquired, you can create a <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> directly with any of those alternatives.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="keyName" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyName" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetKeyRotationPolicy(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> for the specified key in Key Vault.
            </summary>
            <param name="keyName">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <remarks>
            This operation requires the keys/get permission.
            </remarks>
            <returns>A <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> for the specified key.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="keyName" /> contains an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyName" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.GetKeyRotationPolicyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> for the specified key in Key Vault.
            </summary>
            <param name="keyName">The name of the key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <remarks>
            This operation requires the keys/get permission.
            </remarks>
            <returns>A <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> for the specified key.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="keyName" /> contains an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyName" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.RotateKey(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new key version in Key Vault, stores it, then returns the new <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" />.
            </summary>
            <param name="name">The name of key to be rotated. The system will generate a new version in the specified key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <remarks>
            The operation will rotate the key based on the key policy. It requires the keys/rotate permission.
            </remarks>
            <returns>A new version of the rotate <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> contains an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.RotateKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new key version in Key Vault, stores it, then returns the new <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" />.
            </summary>
            <param name="name">The name of key to be rotated. The system will generate a new version in the specified key.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <remarks>
            The operation will rotate the key based on the key policy. It requires the keys/rotate permission.
            </remarks>
            <returns>A new version of the rotate <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> contains an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.UpdateKeyRotationPolicy(System.String,Azure.Security.KeyVault.Keys.KeyRotationPolicy,System.Threading.CancellationToken)">
            <summary>
            Updates the <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> for the specified key in Key Vault.
            </summary>
            <param name="keyName">The name of the key.</param>
            <param name="policy">The <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> to update.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <remarks>
            This operation requires the keys/update permission.
            </remarks>
            <returns>A <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> for the specified key.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="keyName" /> contains an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyName" /> or <paramref name="policy" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.UpdateKeyRotationPolicyAsync(System.String,Azure.Security.KeyVault.Keys.KeyRotationPolicy,System.Threading.CancellationToken)">
            <summary>
            Updates the <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> for the specified key in Key Vault.
            </summary>
            <param name="keyName">The name of the key.</param>
            <param name="policy">The <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> to update.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <remarks>
            This operation requires the keys/update permission.
            </remarks>
            <returns>A <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> for the specified key.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="keyName" /> contains an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyName" /> or <paramref name="policy" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClient.CreateKeyUri(System.Uri,System.String,System.String)">
            <summary>
            Constructs a key <see cref="T:System.Uri" />.
            </summary>
            <param name="vaultUri">The <see cref="T:System.Uri" /> to the Key Vault or Managed HSM.</param>
            <param name="name">Name of the key.</param>
            <param name="version">Optional version of the key.</param>
            <returns>A key <see cref="T:System.Uri" />.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyClientOptions">
            <summary>
            Options that allow you to configure the requests sent to Key Vault.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Keys.KeyClientOptions.LatestVersion">
            <summary>
            The latest service version supported by this client library.
            For more information, see
            <see href="https://docs.microsoft.com/rest/api/keyvault/key-vault-versions">Key Vault versions</see>.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyClientOptions.ServiceVersion">
            <summary>
            The versions of Azure Key Vault supported by this client
            library.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Keys.KeyClientOptions.ServiceVersion.V7_0">
            <summary>
            The Key Vault API version 7.0.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Keys.KeyClientOptions.ServiceVersion.V7_1">
            <summary>
            The Key Vault API version 7.1.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Keys.KeyClientOptions.ServiceVersion.V7_2">
            <summary>
            The Key Vault API version 7.2.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Keys.KeyClientOptions.ServiceVersion.V7_3">
            <summary>
            The Key Vault API version 7.3.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyClientOptions.Version">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Keys.KeyClientOptions.ServiceVersion" /> of the service API used when
            making requests. For more information, see
            <see href="https://docs.microsoft.com/rest/api/keyvault/key-vault-versions">Key Vault versions</see>.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyClientOptions.#ctor(Azure.Security.KeyVault.Keys.KeyClientOptions.ServiceVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyClientOptions" /> class.
            class.
            </summary>
            <param name="version">
            The <see cref="T:Azure.Security.KeyVault.Keys.KeyClientOptions.ServiceVersion" /> of the service API used when
            making requests.
            </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyClientOptions.DisableChallengeResourceVerification">
            <summary>
            Gets or sets whether to disable verification that the authentication challenge resource matches the Key Vault or Managed HSM domain.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyCurveName">
            <summary>
            Elliptic Curve Cryptography (ECC) curve names.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyCurveName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyCurveName" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyCurveName.P256">
            <summary>
            Gets the NIST P-256 elliptic curve, AKA SECG curve SECP256R1
            For more information, see <see href="https://docs.microsoft.com/azure/key-vault/keys/about-keys#curve-types">Curve types</see>.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyCurveName.P256K">
            <summary>
            Gets the SECG SECP256K1 elliptic curve.
            For more information, see <see href="https://docs.microsoft.com/azure/key-vault/keys/about-keys#curve-types">Curve types</see>.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyCurveName.P384">
            <summary>
            Gets the NIST P-384 elliptic curve, AKA SECG curve SECP384R1.
            For more information, see <see href="https://docs.microsoft.com/azure/key-vault/keys/about-keys#curve-types">Curve types</see>.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyCurveName.P521">
            <summary>
            Gets the NIST P-521 elliptic curve, AKA SECG curve SECP521R1.
            For more information, see <see href="https://docs.microsoft.com/azure/key-vault/keys/about-keys#curve-types">Curve types</see>.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyCurveName.op_Equality(Azure.Security.KeyVault.Keys.KeyCurveName,Azure.Security.KeyVault.Keys.KeyCurveName)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.KeyCurveName" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.KeyCurveName" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.KeyCurveName" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyCurveName.op_Inequality(Azure.Security.KeyVault.Keys.KeyCurveName,Azure.Security.KeyVault.Keys.KeyCurveName)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.KeyCurveName" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.KeyCurveName" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.KeyCurveName" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyCurveName.op_Implicit(System.String)~Azure.Security.KeyVault.Keys.KeyCurveName">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Keys.KeyCurveName" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyCurveName.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyCurveName.Equals(Azure.Security.KeyVault.Keys.KeyCurveName)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyCurveName.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyCurveName.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm">
            <summary>
            The encryption algorithm used to protect the exported key material.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm.CkmRsaAesKeyWrap">
            <summary>
            Gets an CKM_RSA_AES_KEY_WRAP <see cref="T:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm.RsaAesKeyWrap256">
            <summary>
            Gets an RSA_AES_KEY_WRAP_256 <see cref="T:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm.RsaAesKeyWrap384">
            <summary>
            Gets an RSA_AES_KEY_WRAP_384 <see cref="T:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm.op_Equality(Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm,Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm.op_Inequality(Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm,Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm.op_Implicit(System.String)~Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm.Equals(Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyExportEncryptionAlgorithm.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyModelFactory">
            <summary>
            Model factory that enables mocking for the Key Vault Keys library.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyModelFactory.JsonWebKey(Azure.Security.KeyVault.Keys.KeyType,System.String,System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Keys.KeyOperation},System.Nullable{Azure.Security.KeyVault.Keys.KeyCurveName},System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> for mocking purposes.
            </summary>
            <param name="keyType">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.KeyType" /> property.</param>
            <param name="id">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.Id" /> property.</param>
            <param name="keyOps">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.KeyOps" /> property.</param>
            <param name="curveName">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.CurveName" /> property.</param>
            <param name="d">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.D" /> property.</param>
            <param name="dp">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.DP" /> property.</param>
            <param name="dq">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.DQ" /> property.</param>
            <param name="e">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.E" /> property.</param>
            <param name="k">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.K" /> property.</param>
            <param name="n">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.N" /> property.</param>
            <param name="p">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.P" /> property.</param>
            <param name="q">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.Q" /> property.</param>
            <param name="qi">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.QI" /> property.</param>
            <param name="t">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.T" /> property.</param>
            <param name="x">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.X" /> property.</param>
            <param name="y">Sets the <see cref="P:Azure.Security.KeyVault.Keys.JsonWebKey.Y" /> property.</param>
            <returns>A new instance of <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyModelFactory.KeyProperties(System.Uri,System.Uri,System.String,System.String,System.Boolean,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Keys.KeyProperties" /> for mocking purposes.
            </summary>
            <param name="id">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Id" /> property.</param>
            <param name="vaultUri">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.VaultUri" /> property.</param>
            <param name="name">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Name" /> property.</param>
            <param name="version">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Version" /> property.</param>
            <param name="managed">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Managed" /> property.</param>
            <param name="createdOn">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.CreatedOn" /> property.</param>
            <param name="updatedOn">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.UpdatedOn" /> property.</param>
            <param name="recoveryLevel">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.RecoveryLevel" /> property.</param>
            <returns>A new instance of <see cref="T:Azure.Security.KeyVault.Keys.KeyProperties" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyModelFactory.KeyProperties(System.Uri,System.Uri,System.String,System.String,System.Boolean,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Keys.KeyProperties" /> for mocking purposes.
            </summary>
            <param name="id">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Id" /> property.</param>
            <param name="vaultUri">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.VaultUri" /> property.</param>
            <param name="name">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Name" /> property.</param>
            <param name="version">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Version" /> property.</param>
            <param name="managed">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Managed" /> property.</param>
            <param name="createdOn">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.CreatedOn" /> property.</param>
            <param name="updatedOn">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.UpdatedOn" /> property.</param>
            <param name="recoveryLevel">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.RecoveryLevel" /> property.</param>
            <param name="recoverableDays">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.RecoverableDays" /> property.</param>
            <returns>A new instance of <see cref="T:Azure.Security.KeyVault.Keys.KeyProperties" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyModelFactory.KeyVaultKey(Azure.Security.KeyVault.Keys.KeyProperties,Azure.Security.KeyVault.Keys.JsonWebKey)">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> for mocking purposes.
            </summary>
            <param name="properties">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Properties" /> property, which provides the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Id" /> and <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Name" /> properties.</param>
            <param name="key">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Key" /> property, which provides the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.KeyType" /> and <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.KeyOperations" /> properties.</param>
            <returns>A new instance of <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyModelFactory.DeletedKey(Azure.Security.KeyVault.Keys.KeyProperties,Azure.Security.KeyVault.Keys.JsonWebKey,System.Uri,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Keys.DeletedKey" /> for mocking purposes.
            </summary>
            <param name="properties">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Properties" /> property, which provides the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Id" /> and <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Name" /> properties.</param>
            <param name="key">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Key" /> property, which provides the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.KeyType" /> and <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.KeyOperations" /> properties.</param>
            <param name="recoveryId">Sets the <see cref="P:Azure.Security.KeyVault.Keys.DeletedKey.RecoveryId" /> property.</param>
            <param name="deletedOn">Sets the <see cref="P:Azure.Security.KeyVault.Keys.DeletedKey.DeletedOn" /> property.</param>
            <param name="scheduledPurgeDate">Sets the <see cref="P:Azure.Security.KeyVault.Keys.DeletedKey.ScheduledPurgeDate" /> property.</param>
            <returns>A new instance of <see cref="T:Azure.Security.KeyVault.Keys.DeletedKey" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyModelFactory.ReleaseKeyResult(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Keys.ReleaseKeyResult" /> for mocking purposes.
            </summary>
            <param name="value">Sets the <see cref="P:Azure.Security.KeyVault.Keys.ReleaseKeyResult.Value" /> property.</param>
            <returns>A new instance of <see cref="T:Azure.Security.KeyVault.Keys.ReleaseKeyResult" /> for mocking purposes.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyModelFactory.KeyRotationPolicy(System.Uri,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> for mocking purposes.
            </summary>
            <param name="id">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyRotationPolicy.Id" /> property.</param>
            <param name="createdOn">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyRotationPolicy.CreatedOn" /> property.</param>
            <param name="updatedOn">Sets the <see cref="P:Azure.Security.KeyVault.Keys.KeyRotationPolicy.UpdatedOn" /> property.</param>
            <returns>A new instance of <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> for mocking purposes.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyOperation">
            <summary>
            An operation that can be performed with the key.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyOperation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyOperation.Encrypt">
            <summary>
            Gets a value that indicates the key can be used to encrypt with the <see cref="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.EncryptAsync(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,System.Byte[],System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Encrypt(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,System.Byte[],System.Threading.CancellationToken)" /> methods.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyOperation.Decrypt">
            <summary>
            Gets a value that indicates the key can be used to decrypt with the <see cref="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.DecryptAsync(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,System.Byte[],System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Decrypt(Azure.Security.KeyVault.Keys.Cryptography.EncryptionAlgorithm,System.Byte[],System.Threading.CancellationToken)" /> methods.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyOperation.Sign">
            <summary>
            Gets a value that indicates the key can be used to sign with the <see cref="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.SignAsync(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.Byte[],System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Sign(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.Byte[],System.Threading.CancellationToken)" /> methods.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyOperation.Verify">
            <summary>
            Gets a value that indicates the key can be used to verify with the <see cref="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.VerifyAsync(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.Byte[],System.Byte[],System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Verify(Azure.Security.KeyVault.Keys.Cryptography.SignatureAlgorithm,System.Byte[],System.Byte[],System.Threading.CancellationToken)" /> methods.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyOperation.WrapKey">
            <summary>
            Gets a value that indicates the key can be used to wrap another key with the <see cref="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.WrapKeyAsync(Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm,System.Byte[],System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.WrapKey(Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm,System.Byte[],System.Threading.CancellationToken)" /> methods.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyOperation.UnwrapKey">
            <summary>
            Gets a value that indicates the key can be used to unwrap another key with the <see cref="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.UnwrapKeyAsync(Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm,System.Byte[],System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.UnwrapKey(Azure.Security.KeyVault.Keys.Cryptography.KeyWrapAlgorithm,System.Byte[],System.Threading.CancellationToken)" /> methods.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyOperation.Import">
            <summary>
            Gets a value that indicates the key can be imported during creation using the <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.ImportKeyAsync(Azure.Security.KeyVault.Keys.ImportKeyOptions,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.ImportKey(Azure.Security.KeyVault.Keys.ImportKeyOptions,System.Threading.CancellationToken)" /> methods.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyOperation.op_Equality(Azure.Security.KeyVault.Keys.KeyOperation,Azure.Security.KeyVault.Keys.KeyOperation)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyOperation.op_Inequality(Azure.Security.KeyVault.Keys.KeyOperation,Azure.Security.KeyVault.Keys.KeyOperation)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyOperation.op_Implicit(System.String)~Azure.Security.KeyVault.Keys.KeyOperation">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Keys.KeyOperation" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyOperation.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyOperation.Equals(Azure.Security.KeyVault.Keys.KeyOperation)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyOperation.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyOperation.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyProperties">
            <summary>
            <see cref="T:Azure.Security.KeyVault.Keys.KeyProperties" /> is the resource containing all the properties of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> except <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> properties.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyProperties.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyProperties" /> class.
            </summary>
            <param name="name">The name of the key.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyProperties.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyProperties" /> class.
            </summary>
            <param name="id">The identifier of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="id" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.Name">
            <summary>
            Gets the name of the key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.Id">
            <summary>
            Gets the key identifier.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.VaultUri">
            <summary>
            Gets the Key Vault base <see cref="T:System.Uri" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.Version">
            <summary>
            Gets the version of the key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.Managed">
            <summary>
            Gets a value indicating whether the key's lifetime is managed by Key Vault.
            If this key is backing a Key Vault certificate, the value will be true.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.Tags">
            <summary>
            Gets a dictionary of tags with specific metadata about the key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.Enabled">
            <summary>
            Gets or sets a value indicating whether the key is enabled and useable for cryptographic operations.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.Exportable">
            <summary>
            Gets or sets a value indicating whether the private key can be exported.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.NotBefore">
            <summary>
            Gets or sets a <see cref="T:System.DateTimeOffset" /> indicating when the key will be valid and can be used for cryptographic operations.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.ExpiresOn">
            <summary>
            Gets or sets a <see cref="T:System.DateTimeOffset" /> indicating when the key will expire and cannot be used for cryptographic operations.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.CreatedOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the key was created.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.UpdatedOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the key was updated.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.RecoverableDays">
            <summary>
            Gets the number of days a key is retained before being deleted for a soft delete-enabled Key Vault.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.RecoveryLevel">
            <summary>
            Gets the recovery level currently in effect for keys in the Key Vault.
            If <c>Purgeable</c>, the key can be permanently deleted by an authorized user;
            otherwise, only the service can purge the keys at the end of the retention interval.
            </summary>
            <value>Possible values include <c>Purgeable</c>, <c>Recoverable+Purgeable</c>, <c>Recoverable</c>, and <c>Recoverable+ProtectedSubscription</c>.</value>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyProperties.ReleasePolicy">
            <summary>
            Gets or sets the policy rules under which the key can be exported.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyProperties.ParseId(System.Uri)">
            <summary>
            Parses the key identifier into the <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.VaultUri" />, <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Name" />, and <see cref="P:Azure.Security.KeyVault.Keys.KeyProperties.Version" /> of the key.
            </summary>
            <param name="id">The key vault object identifier.</param>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyReleasePolicy">
            <summary>
            The policy rules under which the key can be exported.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyReleasePolicy.#ctor(System.BinaryData)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyReleasePolicy" /> class.
            </summary>
            <param name="encodedPolicy">The policy rules under which the key can be released encoded based on the <see cref="P:Azure.Security.KeyVault.Keys.KeyReleasePolicy.ContentType" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="encodedPolicy" /> is null.</exception>
            <example>
            The <paramref name="encodedPolicy" /> can be easily read from a file:
            <code snippet="Snippet:KeyReleasePolicy_FromStream" language="csharp">
            using FileStream file = File.OpenRead("policy.dat");
            KeyReleasePolicy policy = new KeyReleasePolicy(BinaryData.FromStream(file));
            </code>
            </example>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyReleasePolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyReleasePolicy" /> class for deserialization.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyReleasePolicy.ContentType">
            <summary>
            Gets or sets the content type and version of key release policy.
            The service default is "application/json; charset=utf-8".
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyReleasePolicy.EncodedPolicy">
            <summary>
            Gets the policy rules under which the key can be released encoded based on the <see cref="P:Azure.Security.KeyVault.Keys.KeyReleasePolicy.ContentType" />.
            </summary>
            <remarks>
            For more information regarding the release policy grammar for Azure Key Vault, please refer to:
            <list type="bullet">
            <item>
            <description>https://aka.ms/policygrammarkeys for Azure Key Vault release policy grammar.</description>
            </item>
            <item>
            <description>https://aka.ms/policygrammarmhsm for Azure Managed HSM release policy grammar.</description>
            </item>
            </list>
            </remarks>
            <example>
            The <see cref="P:Azure.Security.KeyVault.Keys.KeyReleasePolicy.EncodedPolicy" /> can be easily written to a file:
            <code snippet="Snippet:KeyReleasePolicy_ToStream" language="csharp">
            KeyReleasePolicy policy = key.Properties.ReleasePolicy;
            using (Stream stream = policy.EncodedPolicy.ToStream())
            {
                using FileStream file = File.OpenWrite("policy.dat");
                stream.CopyTo(file);
            }
            </code>
            </example>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyReleasePolicy.Immutable">
            <summary>
            Gets or sets the mutability state of the policy. Once marked immutable, this flag cannot be reset and the policy cannot be changed under any circumstances.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyRotationLifetimeAction">
            <summary>
            An action and its trigger that will be performed by Key Vault over the lifetime of a key.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyRotationLifetimeAction.#ctor(Azure.Security.KeyVault.Keys.KeyRotationPolicyAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationLifetimeAction" /> structure.
            </summary>
            <param name="action">The <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction" /> that will be executed.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyRotationLifetimeAction.Action">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction" /> that will be executed.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyRotationLifetimeAction.TimeAfterCreate">
            <summary>
            Gets or sets the ISO 8601 duration after creation to attempt to rotate. It only applies to <see cref="P:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.Rotate" />.
            </summary>
            <remarks>
            ISO 8601 duration examples:
            <list type="bullet">
            <item>
            <term>P90D</term>
            <description>90 days</description>
            </item>
            <item>
            <term>P3M</term>
            <description>3 months</description>
            </item>
            <item>
            <term>P1Y10D</term>
            <description>1 year and 10 days</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyRotationLifetimeAction.TimeBeforeExpiry">
            <summary>
            Gets or sets the ISO 8601 duration before expiry to attempt to <see cref="P:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.Rotate" /> or <see cref="P:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.Notify" />.
            </summary>
            <remarks>
            ISO 8601 duration examples:
            <list type="bullet">
            <item>
            <term>P90D</term>
            <description>90 days</description>
            </item>
            <item>
            <term>P3M</term>
            <description>3 months</description>
            </item>
            <item>
            <term>P1Y10D</term>
            <description>1 year and 10 days</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy">
            <summary>
            Management policy for a key in Key Vault.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyRotationPolicy.Id">
            <summary>
            Gets the identifier of the <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyRotationPolicy.LifetimeActions">
            <summary>
            Gets the actions that will be performed by Key Vault over the lifetime of a key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyRotationPolicy.ExpiresIn">
            <summary>
            Gets or sets the ISO 8601 duration when the <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> will expire. It should be at least 28 days.
            </summary>
            <remarks>
            ISO 8601 duration examples:
            <list type="bullet">
            <item>
            <term>P90D</term>
            <description>90 days</description>
            </item>
            <item>
            <term>P3M</term>
            <description>3 months</description>
            </item>
            <item>
            <term>P1Y10D</term>
            <description>1 year and 10 days</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyRotationPolicy.CreatedOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> was created.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyRotationPolicy.UpdatedOn">
            <summary>
            Gets a <see cref="T:System.DateTimeOffset" /> indicating when the <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicy" /> was last updated.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction">
            <summary>
            The action that will be executed when key rotation is triggered.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.Notify">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction" /> that will trigger event grid events.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.Rotate">
            <summary>
            Gets a <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction" /> action that will rotate the key based on the key policy.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.op_Equality(Azure.Security.KeyVault.Keys.KeyRotationPolicyAction,Azure.Security.KeyVault.Keys.KeyRotationPolicyAction)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.op_Inequality(Azure.Security.KeyVault.Keys.KeyRotationPolicyAction,Azure.Security.KeyVault.Keys.KeyRotationPolicyAction)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.op_Implicit(System.String)~Azure.Security.KeyVault.Keys.KeyRotationPolicyAction">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.Equals(Azure.Security.KeyVault.Keys.KeyRotationPolicyAction)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyRotationPolicyAction.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyType">
            <summary>
            <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" /> key types.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyType" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyType.Ec">
            <summary>
            An Elliptic Curve Cryptographic (ECC) algorithm.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyType.EcHsm">
            <summary>
            An Elliptic Curve Cryptographic (ECC) algorithm backed by a Hardware Security Module (HSM).
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyType.Rsa">
            <summary>
            An RSA cryptographic algorithm.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyType.RsaHsm">
            <summary>
            An RSA cryptographic algorithm backed by a Hardware Security Module (HSM).
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyType.Oct">
            <summary>
            An AES cryptographic algorithm.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyType.OctHsm">
            <summary>
            An AES cryptographic algorithm backed by a Hardware Security Module (HSM).
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyType.op_Equality(Azure.Security.KeyVault.Keys.KeyType,Azure.Security.KeyVault.Keys.KeyType)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.KeyType" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.KeyType" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.KeyType" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyType.op_Inequality(Azure.Security.KeyVault.Keys.KeyType,Azure.Security.KeyVault.Keys.KeyType)">
            <summary>
            Determines if two <see cref="T:Azure.Security.KeyVault.Keys.KeyType" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Security.KeyVault.Keys.KeyType" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Security.KeyVault.Keys.KeyType" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyType.op_Implicit(System.String)~Azure.Security.KeyVault.Keys.KeyType">
            <summary>
            Converts a string to a <see cref="T:Azure.Security.KeyVault.Keys.KeyType" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyType.Equals(Azure.Security.KeyVault.Keys.KeyType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyVaultKey">
            <summary>
            <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> is the resource consisting of a value and its <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Properties" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyVaultKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> class.
            </summary>
            <param name="name">The name of the key.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Id">
            <summary>
            Gets the key identifier.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Name">
            <summary>
            Gets the name of the key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Key">
            <summary>
            Gets the cryptographic key, the key type, and the operations you can perform using the key.
            </summary>
            <remarks>
            See http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18 for specifications of a JSON web key.
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyVaultKey.KeyType">
            <summary>
            Gets the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKey.KeyType" /> for this <see cref="T:Azure.Security.KeyVault.Keys.JsonWebKey" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyVaultKey.KeyOperations">
            <summary>
            Gets the operations you can perform using the key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyVaultKey.Properties">
            <summary>
            Gets additional properties of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" />.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier">
            <summary>
            Information about a <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> parsed from a <see cref="T:System.Uri" />.
            You can use this information when calling methods of a <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.#ctor(System.Uri)">
            <summary>
            Creates a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier" /> class.
            </summary>
            <param name="id">The <see cref="T:System.Uri" /> to a key or deleted key.</param>
            <exception cref="T:System.ArgumentException"><paramref name="id" /> is not a valid Key Vault or Managed HSM key ID.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="id" /> is null.</exception>
            <remarks>
            Successfully parsing the given <see cref="T:System.Uri" /> does not guarantee that the <paramref name="id" /> is a valid Key Vault or Managed HSM key identifier:
            only that it contains the necessary number of path parts that look like a Key Vault key identifier. If the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.VaultUri" /> references
            a valid Key Vault or Managed HSM, the service will return an error if the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.Name" /> and <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.Version" /> do not specify a valid key.
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.SourceId">
            <summary>
            Gets the source <see cref="T:System.Uri" /> passed to <see cref="M:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.#ctor(System.Uri)" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.VaultUri">
            <summary>
            Gets the <see cref="T:System.Uri" /> of the Key Vault or Managed HSM.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.Name">
            <summary>
            Gets the name of the key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.Version">
            <summary>
            Gets the optional version of the key.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.TryCreate(System.Uri,Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier@)">
            <summary>
            Tries to create a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier" /> from the given <paramref name="id" />.
            </summary>
            <param name="id">A <see cref="T:System.Uri" /> to a Key Vault or Managed HSM key with or without a version.</param>
            <param name="identifier">A <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier" /> from the given <paramref name="id" /> if valid; otherwise, an empty structure if invalid.</param>
            <returns>True if the <see cref="T:System.Uri" /> contains a <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.VaultUri" />, <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.Name" />, and optional <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.Version" />; otherwise, false.</returns>
            <remarks>
            Successfully parsing the given <see cref="T:System.Uri" /> does not guarantee that the <paramref name="id" /> is a valid Key Vault or Managed HSM key identifier:
            only that it contains the necessary number of path parts that look like a Key Vault key identifier. If the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.VaultUri" /> references
            a valid Key Vault or Managed HSM, the service will return an error if the <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.Name" /> and <see cref="P:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.Version" /> do not specify a valid key.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.Equals(Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.KeyVaultKeyIdentifier.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.RandomBytes">
            <summary>
            Contains random bytes returned from <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.GetRandomBytes(System.Int32,System.Threading.CancellationToken)" />
            or <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.GetRandomBytesAsync(System.Int32,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.RandomBytes.Value">
            <summary>
            Gets random bytes returned from <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.GetRandomBytes(System.Int32,System.Threading.CancellationToken)" />
            or <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.GetRandomBytesAsync(System.Int32,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation">
            <summary>
            A long-running operation for <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.StartRecoverDeletedKey(System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.StartRecoverDeletedKeyAsync(System.String,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation" /> for mocking. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.Value">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> of the key being recovered.
            You should await <see cref="M:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" /> before attempting to use a key in this pending state.
            </summary>
            <remarks>
            Azure Key Vault will return a <see cref="T:Azure.Security.KeyVault.Keys.KeyVaultKey" /> immediately but may take time to actually recover the deleted key if soft-delete is enabled.
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.ReleaseKeyOptions">
            <summary>
            Options for <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.ReleaseKey(Azure.Security.KeyVault.Keys.ReleaseKeyOptions,System.Threading.CancellationToken)" /> and
            <see cref="M:Azure.Security.KeyVault.Keys.KeyClient.ReleaseKeyAsync(Azure.Security.KeyVault.Keys.ReleaseKeyOptions,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.ReleaseKeyOptions.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.ReleaseKeyOptions" /> class.
            </summary>
            <param name="name">The name of the key to release.</param>
            <param name="targetAttestationToken">The attestation assertion for the target of the key release.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name" /> or <paramref name="targetAttestationToken" /> contains an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> or <paramref name="targetAttestationToken" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.ReleaseKeyOptions.Name">
            <summary>
            Gets the name of the key to release.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.ReleaseKeyOptions.Version">
            <summary>
            Gets or sets the optional version of the key to release.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.ReleaseKeyOptions.Nonce">
            <summary>
            Gets or sets a client-provided nonce for freshness.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.ReleaseKeyOptions.Algorithm">
            <summary>
            Gets or sets tThe encryption algorithm to use to protected the exported key material.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.ReleaseKeyOptions.TargetAttestationToken">
            <summary>
            Gets the attestation assertion for the target of the key release.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Keys.ReleaseKeyResult">
            <summary>
            The key release result containing the released key.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Keys.ReleaseKeyResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Keys.ReleaseKeyResult" /> class.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Keys.ReleaseKeyResult.Value">
            <summary>
            Gets a signed object containing the released key.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.KeyVaultPipeline.HttpPipeline">
            <summary>
            Gets the <see cref="P:Azure.Security.KeyVault.KeyVaultPipeline.HttpPipeline" /> used by this <see cref="T:Azure.Security.KeyVault.KeyVaultPipeline" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.AuthorizeRequestAsync(Azure.Core.HttpMessage)">
            <summary>
            Executes before <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.ProcessAsync(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> or
            <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.Process(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> is called.
            Implementers of this method are expected to call <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequest(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" /> or <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequestAsync(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" />
            if authorization is required for requests not related to handling a challenge response.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> this policy would be applied to.</param><returns>The <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.AuthorizeRequest(Azure.Core.HttpMessage)">
            <summary>
            Executes before <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.ProcessAsync(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> or
            <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.Process(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> is called.
            Implementers of this method are expected to call <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequest(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" /> or <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequestAsync(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" />
            if authorization is required for requests not related to handling a challenge response.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> this policy would be applied to.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.AuthorizeRequestOnChallengeAsync(Azure.Core.HttpMessage)">
            <summary>
            Executed in the event a 401 response with a WWW-Authenticate authentication challenge header is received after the initial request.
            </summary><remarks>Service client libraries may override this to handle service specific authentication challenges.</remarks><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> to be authenticated.</param><returns>A boolean indicating whether the request was successfully authenticated and should be sent to the transport.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.AuthorizeRequestOnChallenge(Azure.Core.HttpMessage)">
            <summary>
            Executed in the event a 401 response with a WWW-Authenticate authentication challenge header is received after the initial request.
            </summary><remarks>Service client libraries may override this to handle service specific authentication challenges.</remarks><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> to be authenticated.</param><returns>A boolean indicating whether the request was successfully authenticated and should be sent to the transport.</returns>
        </member>
        <member name="P:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.ChallengeParameters.AuthorizationUri">
            <summary>
            Gets the "authorization" or "authorization_uri" parameter from the challenge response.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.ChallengeParameters.Scopes">
            <summary>
            Gets the "resource" or "scope" parameter from the challenge response. This should end with "/.default".
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.ChallengeParameters.TenantId">
            <summary>
            Gets the tenant ID from <see cref="P:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.ChallengeParameters.AuthorizationUri" />.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.KeyVaultPage`1">
            <summary>
            Defines a page in Azure responses.
            </summary>
            <typeparam name="T">Type of the page content items</typeparam>
        </member>
        <member name="P:Azure.Security.KeyVault.KeyVaultPage`1.Items">
            <summary>
            Gets the content items.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.KeyVaultPage`1.NextLink">
            <summary>
            Gets the link to the next page.
            </summary>
        </member>
        <member name="T:Azure.Core.HashCodeBuilder">
            <summary>
            Copied from https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/HashCode.cs.
            </summary>
        </member>
        <member name="T:Azure.Core.AuthorizationChallengeParser">
            <summary>
            A helper class for parsing Authorization challenge headers.
            </summary>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.GetChallengeParameterFromResponse(Azure.Response,System.String,System.String)">
            <summary>
            Parses the specified parameter from a challenge hearder found in the specified <see cref="T:Azure.Response" />.
            </summary>
            <param name="response">The <see cref="T:Azure.Response" /> to parse.</param>
            <param name="challengeScheme">The challenge scheme containing the <paramref name="challengeParameter" />. For example: "Bearer"</param>
            <param name="challengeParameter">The parameter key name containing the value to return.</param>
            <returns>The value of the parameter name specified in <paramref name="challengeParameter" /> if it is found in the specified <paramref name="challengeScheme" />.</returns>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)">
            <summary>
            Iterates through the challenge schemes present in a challenge header.
            </summary>
            <param name="headerValue">
            The header value which will be sliced to remove the first parsed <paramref name="challengeKey" />.
            </param>
            <param name="challengeKey">The parsed challenge scheme.</param>
            <returns>
            <c>true</c> if a challenge scheme was successfully parsed.
            The value of <paramref name="headerValue" /> should be passed to <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextParameter(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.Char)" /> to parse the challenge parameters if <c>true</c>.
            </returns>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.TryGetNextParameter(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.Char)">
            <summary>
            Iterates through a challenge header value after being parsed by <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" />.
            </summary>
            <param name="headerValue">The header value after being parsed by <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" />.</param>
            <param name="paramKey">The parsed challenge parameter key.</param>
            <param name="paramValue">The parsed challenge parameter value.</param>
            <param name="separator">The challenge parameter key / value pair separator. The default is '='.</param>
            <returns>
            <c>true</c> if the next available challenge parameter was successfully parsed.
            <c>false</c> if there are no more parameters for the current challenge scheme or an additional challenge scheme was encountered in the <paramref name="headerValue" />.
            The value of <paramref name="headerValue" /> should be passed again to <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" /> to attempt to parse any additional challenge schemes if <c>false</c>.
            </returns>
        </member>
        <member name="M:Azure.Core.Base64Url.Decode(System.String)">
            <summary> Converts a Base64URL encoded string to a string.</summary>
            <param name="encoded">The Base64Url encoded string containing UTF8 bytes for a string.</param>
            <returns>The string represented by the Base64URL encoded string.</returns>
        </member>
        <member name="M:Azure.Core.Base64Url.Encode(System.Byte[])">
            <summary>Encode a byte array as a Base64URL encoded string.</summary>
            <param name="bytes">Raw byte input buffer.</param>
            <returns>The bytes, encoded as a Base64URL string.</returns>
        </member>
        <member name="M:Azure.Core.Base64Url.DecodeString(System.String)">
            <summary> Converts a Base64URL encoded string to a string.</summary>
            <param name="encoded">The Base64Url encoded string containing UTF8 bytes for a string.</param>
            <returns>The string represented by the Base64URL encoded string.</returns>
        </member>
        <member name="M:Azure.Core.Base64Url.EncodeString(System.String)">
            <summary>Encode a string as a Base64URL encoded string.</summary>
            <param name="value">String input buffer.</param>
            <returns>The UTF8 bytes for the string, encoded as a Base64URL string.</returns>
        </member>
        <member name="T:Azure.Core.AzureResourceProviderNamespaceAttribute">
            <summary>
            This attribute should be set on all client assemblies with value of one of the resource providers
            from the https://docs.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers list.
            </summary>
        </member>
        <member name="T:Azure.Core.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T" /> data can be written.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity" /> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:Azure.Core.ArrayBufferWriter`1" /> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1" /> that <paramref name="count" /> amount of data was written to the output <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count" /> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:Azure.Core.OperationInternal">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternal.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.SetState(Azure.Core.OperationState)">
            <summary>
            Sets the <see cref="T:Azure.Core.OperationInternal" /> state immediately.
            </summary>
            <param name="state">The <see cref="T:Azure.Core.OperationState" /> used to set <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /> and other members.</param>
        </member>
        <member name="T:Azure.Core.IOperation">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
        </member>
        <member name="M:Azure.Core.IOperation.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />
            don't need to be updated. Operation-specific properties, such as "<c>CreateOn</c>" or "<c>LastModified</c>",
            must be manually updated by the operation implementing this method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&gt; IOperation.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState.Failure(response.GetRawResponse());<br />
                return OperationState.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationState.Success(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. If left <c>null</c>,
            a default exception is created based on the <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.RawResponse">
            <summary>
            The last HTTP response received from the server. Its update already handled in calls to "<c>UpdateStatus</c>" and
            "<c>WaitForCompletionAsync</c>", but custom methods not supported by this class, such as "<c>CancelOperation</c>",
            must update it as well.
            <example>Usage example:
            <code>
              public Response GetRawResponse() =&gt; _operationInternal.RawResponse;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.HasCompleted">
            <summary>
            Returns <c>true</c> if the long-running operation has completed.
            <example>Usage example:
            <code>
              public bool HasCompleted =&gt; _operationInternal.HasCompleted;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&gt; UpdateStatusAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.UpdateStatusAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public Response UpdateStatus(CancellationToken cancellationToken) =&gt; _operationInternal.UpdateStatus(cancellationToken);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server. <strong></strong></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal`1">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation`1" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal`1" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal`1" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.HasValue" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.Value" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation{`0},Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal`1" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation`1" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation`1" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.HasValue">
            <summary>
            Returns <c>true</c> if the long-running operation completed successfully and has produced a final result.
            <example>Usage example:
            <code>
              public bool HasValue =&gt; _operationInternal.HasValue;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.Value">
            <summary>
            The final result of the long-running operation.
            <example>Usage example:
            <code>
              public T Value =&gt; _operationInternal.Value;
            </code>
            </example>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the operation has not completed yet.</exception>
            <exception cref="T:Azure.RequestFailedException">Thrown when the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then use as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the property <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />
            property and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.SetState(Azure.Core.OperationState{`0})">
            <summary>
            Sets the <see cref="T:Azure.Core.OperationInternal`1" /> state immediately.
            </summary>
            <param name="state">The <see cref="T:Azure.Core.OperationState`1" /> used to set <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /> and other members.</param>
        </member>
        <member name="T:Azure.Core.IOperation`1">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal`1" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.IOperation`1.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal`1" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> or
            <see cref="P:Azure.Core.OperationInternal`1.Value" />, don't need to be updated. Operation-specific properties, such
            as "<c>CreateOn</c>" or "<c>LastModified</c>", must be manually updated by the operation implementing this
            method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&lt;T&gt;&gt; IOperation&lt;T&gt;.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState&lt;T&gt;.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState&lt;T&gt;.Failure(response.GetRawResponse());<br />
                return OperationState&lt;T&gt;.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState`1" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState`1">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal`1" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="value">The final result of the long-running operation.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> or <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. The same exception will be thrown when
            <see cref="P:Azure.Core.OperationInternal`1.Value" /> is called. If left <c>null</c>, a default exception is created based on the
            <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Azure.Core.DelayStrategy">
            <summary>
            Strategy to control delay behavior.
            </summary>
        </member>
        <member name="M:Azure.Core.DelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the interval of next delay iteration.
            </summary>
            <remarks> Note that the value could change per call. </remarks>
            <param name="response"> Server response. </param>
            <param name="suggestedInterval"> Suggested pollingInterval. It is up to strategy
            implementation to decide how to deal with this parameter. </param>
            <returns> Delay interval of next iteration. </returns>
        </member>
        <member name="T:Azure.Core.ConstantDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> with constant polling interval.
            </summary>
            <remarks>Polling interval is always equal to the given polling interval.</remarks>
        </member>
        <member name="M:Azure.Core.ConstantDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.ExponentialDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" />. Polling interval changes according to
            the sequence {1, 1, 1, 2, 4, ...32}.
            </summary>
            <remarks>Polling interval always follows the given sequence.</remarks>
        </member>
        <member name="M:Azure.Core.ExponentialDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from {1, 1, 1, 2, 4, ...32}.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
        </member>
        <member name="T:Azure.Core.RetryAfterDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> of which the interval is from
            retry-after header of service response.
            </summary>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.#ctor(Azure.Core.DelayStrategy)">
            <summary>
            Create a <see cref="T:Azure.Core.RetryAfterDelayStrategy" /> with a default retry-after value which normally
            comes from the initial response of an LRO operation.
            </summary>
            <param name="fallbackStrategy"> Fallback strategy if retry after is not present. </param>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of retry-after header of given service response and <paramref name="suggestedInterval" />.
            If retry-after header is not found, adopt the value of last retry-after header.
            </summary>
            <param name="response">Service response which might carry retry-after header.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of retry-after header and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.OperationPoller">
            <summary>
            Implementation of LRO polling logic.
            </summary>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.ExtractFailureContent(System.String,Azure.Core.ResponseHeaders,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Partial method that can optionally be defined to extract the error
            message, code, and details in a service specific manner.
            </summary>
            <param name="content">The error content.</param>
            <param name="responseHeaders">The response headers.</param>
            <param name="additionalInfo">Additional error details.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.DiagnosticScope.ActivityKind">
            <summary>
            Kind describes the relationship between the Activity, its parents, and its children in a Trace.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Internal">
            <summary>
            Default value.
            Indicates that the Activity represents an internal operation within an application, as opposed to an operations with remote parents or children.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Server">
            <summary>
            Server activity represents request incoming from external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Client">
            <summary>
            Client activity represents outgoing request to the external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Producer">
            <summary>
            Producer activity represents output provided to external components.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Consumer">
            <summary>
            Consumer activity represents output received from an external component.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            Until we can reference the 5.0 of System.Diagnostics.DiagnosticSource
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Azure.Core.Argument">
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument" /> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value" /> is the default value for type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is the default value for type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNull``1(``0,System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not null.</exception>
        </member>
        <member name="T:Azure.Core.AppContextSwitchHelper">
            <summary>
            Helper for interacting with AppConfig settings and their related Environment variable settings.
            </summary>
        </member>
        <member name="M:Azure.Core.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Determines if either an AppContext switch or its corresponding Environment Variable is set
            </summary>
            <param name="appContexSwitchName">Name of the AppContext switch.</param>
            <param name="environmentVariableName">Name of the Environment variable.</param>
            <returns>If the AppContext switch has been set, returns the value of the switch.
            If the AppContext switch has not been set, returns the value of the environment variable.
            False if neither is set.
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.Azure.KeyClientBuilderExtensions">
            <summary>
            Extension methods to <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" /> or <see cref="T:Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient" /> to clients builder.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.KeyClientBuilderExtensions.AddKeyClient``1(``0,System.Uri)">
            <summary>
            Registers a <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" /> instance with the provided <paramref name="vaultUri" />
            </summary>
            <typeparam name="TBuilder">The type of builder to extend.</typeparam>
            <param name="builder">The builder to extend.</param>
            <param name="vaultUri">The URI to an Azure Key Vault, for example: https://my-vault.vault.azure.net</param>
            <returns>An Azure client builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.KeyClientBuilderExtensions.AddKeyClient``2(``0,``1)">
            <summary>
            Registers a <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" /> instance with connection options loaded from the provided <paramref name="configuration" /> instance.
            </summary>
            <typeparam name="TBuilder">The type of builder to extend.</typeparam>
            <typeparam name="TConfiguration">The type of configuration to use for the client builder.</typeparam>
            <param name="builder">The builder to extend.</param>
            <param name="configuration">The configuration to use for the client builder.</param>
            <returns>An Azure client builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.KeyClientBuilderExtensions.AddCryptographyClient``1(``0,System.Uri)">
            <summary>
            Registers a <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" /> instance with the provided <paramref name="vaultUri" />
            </summary>
            <typeparam name="TBuilder">The type of builder to extend.</typeparam>
            <param name="builder">The builder to extend.</param>
            <param name="vaultUri">The URI to a specific key in an Azure Key Vault, for example: https://my-vault.vault.azure.net/keys/my-key</param>
            <returns>An Azure client builder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Azure.KeyClientBuilderExtensions.AddCryptographyClient``2(``0,``1)">
            <summary>
            Registers a <see cref="T:Azure.Security.KeyVault.Keys.KeyClient" /> instance with connection options loaded from the provided <paramref name="configuration" /> instance.
            </summary>
            <typeparam name="TBuilder">The type of builder to extend.</typeparam>
            <typeparam name="TConfiguration">The type of configuration to use for the client builder.</typeparam>
            <param name="builder">The builder to extend.</param>
            <param name="configuration">The configuration to use for the client builder.</param>
            <returns>An Azure client builder.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
    </members>
</doc>
